#!/usr/bin/env python3
"""
Telegram –º–æ–¥–µ—Ä–∞—Ç–æ—Ä-–±–æ—Ç —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import os
import asyncio
import hashlib
import uuid
import logging
import re
import hmac
import json
import aiohttp
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, List, Optional

from telegram import Update, ReactionTypeEmoji
from telegram.ext import Application, MessageHandler, CommandHandler, filters, ContextTypes
from dotenv import load_dotenv

from database import db
from logger_config import setup_logging, log_bot_event

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging("MODERATOR BOT", "DEBUG")  # –ò–∑–º–µ–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ DEBUG
logger = logging.getLogger('BOT')

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

BOT_SHARED_SECRET = os.getenv("BOT_SHARED_SECRET")
ADMIN_URL = os.getenv("ADMIN_URL", "http://localhost:8000")
FRONTEND_URL = os.getenv("FRONTEND_URL", "http://localhost:3000")

logger.info(f"üîë BOT_TOKEN –Ω–∞–π–¥–µ–Ω: {BOT_TOKEN[:10]}...{BOT_TOKEN[-4:]}")
logger.info(f"üîó ADMIN_URL: {ADMIN_URL}")
logger.info(f"üåê FRONTEND_URL: {FRONTEND_URL}")
if BOT_SHARED_SECRET:
    logger.info(f"üîê BOT_SHARED_SECRET –Ω–∞–π–¥–µ–Ω: {BOT_SHARED_SECRET[:8]}...")
    logger.debug("‚úÖ –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã")
else:
    logger.warning("‚ö†Ô∏è BOT_SHARED_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    logger.warning("‚ö†Ô∏è HTTP –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –±—ç–∫–µ–Ω–¥ –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã")

# –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
logger.debug(f"üóÇÔ∏è DATABASE_PATH: {os.getenv('DATABASE_PATH', '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é')}")
logger.debug(f"üê≥ –ó–∞–ø—É—Å–∫ –≤ Docker: {'–î–∞' if os.path.exists('/.dockerenv') else '–ù–µ—Ç'}")

def get_file_hash(file_content: bytes) -> str:
    """–í—ã—á–∏—Å–ª–∏—Ç—å —Ö—ç—à —Ñ–∞–π–ª–∞"""
    return hashlib.md5(file_content).hexdigest()

def create_hmac_signature(data: str, secret: str) -> str:
    """–°–æ–∑–¥–∞—Ç—å HMAC-SHA256 –ø–æ–¥–ø–∏—Å—å"""
    return hmac.new(
        secret.encode('utf-8'),
        data.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()

async def link_telegram_account(code: str, user_id: int, username: str, first_name: str, last_name: str) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É Telegram –∞–∫–∫–∞—É–Ω—Ç–∞"""
    if not BOT_SHARED_SECRET:
        return {"success": False, "error": "BOT_SHARED_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    payload = {
        "code": code,
        "tg_user_id": str(user_id),
        "username": username or "",
        "first_name": first_name or "",
        "last_name": last_name or ""
    }
    
    # –°–æ–∑–¥–∞–µ–º JSON —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–¥–ø–∏—Å—å
    json_data = json.dumps(payload, separators=(',', ':'), ensure_ascii=False)
    signature = create_hmac_signature(json_data, BOT_SHARED_SECRET)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    logger.debug(f"üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–∞ {FRONTEND_URL}/api/telegram/link")
    logger.debug(f"üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {json_data}")
    logger.debug(f"üîê –ü–æ–¥–ø–∏—Å—å: {signature[:16]}...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{FRONTEND_URL}/api/telegram/link",
                data=json_data,
                headers={
                    "Content-Type": "application/json",
                    "X-Signature": signature
                },
                timeout=aiohttp.ClientTimeout(total=10)
            ) as response:
                response_data = await response.json()
                logger.debug(f"üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: status={response.status}, data={response_data}")
                return {
                    "success": response.status == 200,
                    "status_code": response.status,
                    "data": response_data
                }
    except aiohttp.ClientError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return {"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}"}
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return {"success": False, "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"}

async def send_reaction_data(message, matched_tag: Dict[str, Any], media_info: Dict[str, Any], thread_name: str, status: str = "approved") -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥"""
    if not BOT_SHARED_SECRET:
        logger.warning("‚ö†Ô∏è BOT_SHARED_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
        return {"success": False, "error": "BOT_SHARED_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    payload = {
        "tg_user_id": str(message.from_user.id),
        "username": message.from_user.username or "",
        "first_name": message.from_user.first_name or "",
        "last_name": message.from_user.last_name or "",
        "tag": matched_tag['tag'],
        "counter_name": matched_tag.get('counter_name', ''),
        "emoji": matched_tag['emoji'],
        "chat_id": str(message.chat_id),
        "message_id": str(message.message_id),
        "text": message.text or "",
        "caption": message.caption or "",
        "thread_name": thread_name,
        "has_photo": media_info.get('has_photo', False),
        "has_video": media_info.get('has_video', False),
        "media_file_ids": media_info.get('media_file_ids', []),
        "status": status,  # approved, pending, rejected
        "timestamp": datetime.now().isoformat()
    }
    
    # –°–æ–∑–¥–∞–µ–º JSON —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–¥–ø–∏—Å—å
    json_data = json.dumps(payload, separators=(',', ':'), ensure_ascii=False)
    signature = create_hmac_signature(json_data, BOT_SHARED_SECRET)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    url = f"{ADMIN_URL}/api/telegram/reaction"
    logger.info(f"üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞: {url}")
    logger.debug(f"üìù –î–∞–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏: {json_data}")
    logger.debug(f"üîê –ü–æ–¥–ø–∏—Å—å: {signature[:16]}...")
    logger.debug(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: Content-Type=application/json, X-Signature={signature[:16]}...")
    
    try:
        async with aiohttp.ClientSession() as session:
            logger.debug(f"üåê –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é –¥–ª—è {url}")
            async with session.post(
                url,
                data=json_data,
                headers={
                    "Content-Type": "application/json",
                    "X-Signature": signature
                },
                timeout=aiohttp.ClientTimeout(total=10)
            ) as response:
                logger.debug(f"üì° HTTP –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç...")
                if response.status == 200:
                    response_data = await response.json()
                    logger.info(f"‚úÖ –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–û:")
                    logger.info(f"üåê URL: {url}")
                    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}")
                    logger.info(f"üè∑Ô∏è –¢–µ–≥: {matched_tag['tag']}")
                    logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
                    logger.debug(f"üì• –û—Ç–≤–µ—Ç –±—ç–∫–µ–Ω–¥–∞: {response_data}")
                    return {
                        "success": True,
                        "status_code": response.status,
                        "data": response_data
                    }
                else:
                    response_text = await response.text()
                    logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ë–≠–ö–ï–ù–î–ê:")
                    logger.error(f"üåê URL: {url}")
                    logger.error(f"üìä HTTP –∫–æ–¥: {response.status}")
                    logger.error(f"üìÑ –û—Ç–≤–µ—Ç –±—ç–∫–µ–Ω–¥–∞: '{response_text}'")
                    logger.error(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
                    logger.debug(f"üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {json_data}")
                    logger.debug(f"üîê –ü–æ–ª–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: {signature}")
                    return {
                        "success": False,
                        "status_code": response.status,
                        "data": {}
                    }
    except aiohttp.ClientError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")
        return {"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}"}
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")
        return {"success": False, "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"}

async def get_media_info(message) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    media_info = {
        "has_photo": False,
        "has_video": False,
        "photo_file_id": None,
        "video_file_id": None,
        "media_file_ids": [],
        "photo_file_ids": [],
        "video_file_ids": []
    }
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    if message.photo:
        media_info["has_photo"] = True
        largest_photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        media_info["photo_file_id"] = largest_photo.file_id
        media_info["media_file_ids"].append(largest_photo.file_id)
        media_info["photo_file_ids"].append(largest_photo.file_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
    if message.video:
        media_info["has_video"] = True
        media_info["video_file_id"] = message.video.file_id
        media_info["media_file_ids"].append(message.video.file_id)
        media_info["video_file_ids"].append(message.video.file_id)
    
    return media_info

async def check_media_duplicates(context: ContextTypes.DEFAULT_TYPE, message, media_info: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    if not (media_info["has_photo"] or media_info["has_video"]):
        logger.debug("üñºÔ∏è –ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        return False
    
    logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è {len(media_info['media_file_ids'])} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤")
    
    for file_id in media_info["media_file_ids"]:
        try:
            logger.debug(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏ –≤—ã—á–∏—Å–ª—è–µ–º —Ö—ç—à
            file = await context.bot.get_file(file_id)
            file_content = await file.download_as_bytearray()
            file_hash = get_file_hash(bytes(file_content))
            
            logger.debug(f"üîê –•—ç—à —Ñ–∞–π–ª–∞: {file_hash}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ö—ç—à
            if db.check_media_hash(file_hash):
                logger.info(f"üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {file_hash}")
                return True
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ö—ç—à
            file_type = "photo" if file_id in media_info["photo_file_ids"] else "video"
            db.add_media_hash(
                file_hash, file_id, file_type,
                message.from_user.id, message.chat_id, message.message_id
            )
            logger.debug(f"‚úÖ –ù–æ–≤—ã–π {file_type} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É: {file_hash}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ {file_id}: {e}")
    
    return False

async def process_reaction_queue(context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —Ä–µ–∞–∫—Ü–∏–π"""
    try:
        queue = db.get_reaction_queue()
        
        if queue:
            logger.debug(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Ä–µ–∞–∫—Ü–∏–π: {len(queue)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        for item in queue:
            try:
                # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é
                await context.bot.set_message_reaction(
                    chat_id=item['chat_id'],
                    message_id=item['message_id'],
                    reaction=ReactionTypeEmoji(emoji=item['emoji'])
                )
                
                logger.info(f"‚úÖ –†–µ–∞–∫—Ü–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {item['emoji']} ‚Üí —Å–æ–æ–±—â–µ–Ω–∏–µ {item['message_id']}")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥
                if item.get('moderation_id'):
                    try:
                        moderation_item = db.get_moderation_by_id(item['moderation_id'])
                        if moderation_item:
                            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                            class MockMessage:
                                def __init__(self, data):
                                    self.chat_id = data['chat_id']
                                    self.message_id = data['message_id']
                                    self.text = data.get('text', '')
                                    self.caption = data.get('caption', '')
                                    class MockUser:
                                        def __init__(self, user_data):
                                            self.id = user_data['user_id']
                                            self.username = user_data.get('username', '')
                                            self.first_name = user_data.get('first_name', '')
                                            self.last_name = user_data.get('last_name', '')
                                    self.from_user = MockUser(data)
                            
                            mock_message = MockMessage(moderation_item)
                            matched_tag = {
                                'tag': moderation_item.get('tag', ''),
                                'counter_name': moderation_item.get('counter_name', ''),
                                'emoji': moderation_item.get('emoji', '')
                            }
                            media_info = moderation_item.get('media_info', {})
                            thread_name = moderation_item.get('thread_name', '')
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±—ç–∫–µ–Ω–¥
                            await send_reaction_data(mock_message, matched_tag, media_info, thread_name, "approved")
                            logger.debug(f"üìä –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∞–∫—Ü–∏–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –±—ç–∫–µ–Ω–¥")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∞–∫—Ü–∏–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                db.remove_reaction_from_queue(item['id'])
                
            except Exception as e:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è {item['message_id']}: {e}")
                # –û—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–∞–∫—Ü–∏–π: {e}")

def add_to_moderation_queue(message, matched_tag: Dict[str, Any], media_info: Dict[str, Any], thread_name: str):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    try:
        item_data = {
            'chat_id': message.chat_id,
            'message_id': message.message_id,
            'user_id': message.from_user.id,
            'username': message.from_user.username or message.from_user.first_name or 'Unknown',
            'tag': matched_tag['tag'],
            'emoji': matched_tag['emoji'],
            'text': message.text or '',
            'caption': message.caption or '',
            'media_info': media_info,
            'thread_name': thread_name,
            'counter_name': matched_tag.get('counter_name', '')
        }
        
        item_id = db.add_moderation_item(item_data)
        log_bot_event('moderation_added', {
            'user': item_data['username'],
            'tag': item_data['tag'],
            'id': item_id
        })
        return item_id
        
    except Exception as e:
        log_bot_event('error', {'message': f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}"})
        return None

def append_log(message, matched_tag: Dict[str, Any], thread_name: str, media_info: Dict[str, Any]):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥"""
    try:
        log_data = {
            'user_id': message.from_user.id,
            'username': message.from_user.username or message.from_user.first_name or 'Unknown',
            'chat_id': message.chat_id,
            'message_id': message.message_id,
            'trigger': matched_tag['tag'],
            'emoji': matched_tag['emoji'],
            'thread_name': thread_name,
            'media_type': 'photo' if media_info['has_photo'] else ('video' if media_info['has_video'] else ''),
            'caption': message.caption or ''
        }
        
        db.add_log(log_data)
        
    except Exception as e:
        log_bot_event('error', {'message': f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}"})

async def handle_any(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Ä–µ–∞–∫—Ü–∏–π –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (—Ñ–æ–ª–ª–±—ç–∫)
    await process_reaction_queue(context)
    
    message = update.message
    if not message or not message.text and not message.caption:
        logger.debug("üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_info = f"{message.from_user.username or message.from_user.first_name} (ID: {message.from_user.id})"
    text_preview = (message.text or message.caption or "")[:100]
    logger.info(f"üì® –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_info}: {text_preview}")
    logger.debug(f"üìç –ß–∞—Ç: {message.chat_id}, –°–æ–æ–±—â–µ–Ω–∏–µ: {message.message_id}")
    logger.debug(f"üîç –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: {message.text or message.caption or '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    logger.debug(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–±–µ–∑_username'} | {message.from_user.first_name or ''} {message.from_user.last_name or ''}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.photo:
        logger.debug("üñºÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ")
    if message.video:
        logger.debug("üé• –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–µ–æ")
    if message.is_topic_message:
        logger.debug("üßµ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥–µ")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –∏–∑ –ë–î
    tags = db.get_tags()
    if not tags:
        logger.debug("üö´ –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    logger.debug(f"üè∑Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tags)} —Ç–µ–≥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (message.text or message.caption or "").lower()
    logger.debug(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç: {text}")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞
    thread_name = ""
    if message.is_topic_message and message.reply_to_message:
        try:
            thread_name = message.reply_to_message.forum_topic_created.name
            logger.debug(f"üßµ –¢—Ä–µ–¥: {thread_name}")
        except:
            thread_name = "Unknown Thread"
            logger.debug("üßµ –¢—Ä–µ–¥: Unknown Thread")
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–≥
    matched_tag = None
    logger.debug(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å—Ä–µ–¥–∏ {len(tags)} —Ç–µ–≥–æ–≤")
    
    for tag in tags:
        tag_text = tag['tag'].lower()
        logger.debug(f"üè∑Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥ '{tag_text}' (—Ä–µ–∂–∏–º: {tag['match_mode']})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞
        if tag['match_mode'] == 'equals':
            # –†–µ–∂–∏–º 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - —Ç–µ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–æ–º
            pattern = r'(?:^|\s)' + re.escape(tag_text) + r'(?=\s|$)'
            if re.search(pattern, text):
                matched_tag = tag
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {tag_text} (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)")
                break
        elif tag['match_mode'] == 'prefix':
            # –†–µ–∂–∏–º 2: –ü—Ä–µ—Ñ–∏–∫—Å - –∏—â–µ–º —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Ç–µ–≥–∞
            words = text.split()
            for word in words:
                if word.startswith(tag_text):
                    matched_tag = tag
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {tag_text} -> {word} (–ø—Ä–µ—Ñ–∏–∫—Å)")
                    break
            if matched_tag:
                break
    
    if not matched_tag:
        logger.debug("üö´ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
    if matched_tag['thread_name'] and thread_name.lower() != matched_tag['thread_name'].lower():
        logger.debug(f"üö´ –¢—Ä–µ–¥ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–µ—Ç—Å—è '{matched_tag['thread_name']}', –ø–æ–ª—É—á–µ–Ω '{thread_name}'")
        return
    
    logger.info(f"üéØ –¢–µ–≥ —Å—Ä–∞–±–æ—Ç–∞–ª: {matched_tag['tag']} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–≥–∞
    logger.debug(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–≥–∞:")
    logger.debug(f"   üî• –≠–º–æ–¥–∑–∏: {matched_tag['emoji']}")
    logger.debug(f"   üìä –°—á–µ—Ç—á–∏–∫: {matched_tag.get('counter_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
    logger.debug(f"   ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {matched_tag.get('delay', 0)}—Å")
    logger.debug(f"   üîç –ú–æ–¥–µ—Ä–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if matched_tag.get('moderation_enabled') else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
    logger.debug(f"   üñºÔ∏è –¢—Ä–µ–±—É–µ—Ç –º–µ–¥–∏–∞: {'–î–∞' if matched_tag.get('require_photo') else '–ù–µ—Ç'}")
    if matched_tag.get('thread_name'):
        logger.debug(f"   üßµ –¢–æ–ª—å–∫–æ –≤ —Ç—Ä–µ–¥–µ: {matched_tag['thread_name']}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö
    media_info = await get_media_info(message)
    logger.debug(f"üñºÔ∏è –ú–µ–¥–∏–∞: —Ñ–æ—Ç–æ={media_info['has_photo']}, –≤–∏–¥–µ–æ={media_info['has_video']}")
    if media_info['media_file_ids']:
        logger.debug(f"üìÅ ID —Ñ–∞–π–ª–æ–≤: {media_info['media_file_ids']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
    if matched_tag['require_photo'] and not (media_info['has_photo'] or media_info['has_video']):
        logger.info(f"üö´ –¢—Ä–µ–±—É–µ—Ç—Å—è –º–µ–¥–∏–∞—Ñ–∞–π–ª, –Ω–æ –µ–≥–æ –Ω–µ—Ç")
        if matched_tag['reply_need_photo']:
            await message.reply_text(matched_tag['reply_need_photo'])
            logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {matched_tag['reply_need_photo']}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
    if media_info['has_photo'] or media_info['has_video']:
        is_duplicate = await check_media_duplicates(context, message, media_info)
        if is_duplicate:
            logger.info(f"üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –º–µ–¥–∏–∞—Ñ–∞–π–ª")
            if matched_tag['reply_duplicate']:
                await message.reply_text(matched_tag['reply_duplicate'])
                logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥—É–±–ª–∏–∫–∞—Ç–µ: {matched_tag['reply_duplicate']}")
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    if matched_tag['moderation_enabled']:
        logger.info(f"‚è≥ –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {matched_tag['tag']}")
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        item_id = add_to_moderation_queue(message, matched_tag, media_info, thread_name)
        logger.debug(f"üìù –°–æ–∑–¥–∞–Ω —ç–ª–µ–º–µ–Ω—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ID: {item_id}")
        
        # –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏ (–ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è)
        logger.debug("üìä –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é - –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ –æ—á–µ—Ä–µ–¥—å
        if matched_tag['reply_pending']:
            await message.reply_text(matched_tag['reply_pending'])
            logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {matched_tag['reply_pending']}")
        
        return

    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - —Å—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    delay = matched_tag['delay']
    logger.info(f"üî• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è: {matched_tag['emoji']} | –ó–∞–¥–µ—Ä–∂–∫–∞: {delay}—Å")
    
    if delay > 0:
        logger.debug(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay}—Å –ø–µ—Ä–µ–¥ —Ä–µ–∞–∫—Ü–∏–µ–π...")
        await asyncio.sleep(delay)
    
    # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é
    try:
        await message.set_reaction(ReactionTypeEmoji(emoji=matched_tag['emoji']))
        logger.info(f"‚úÖ –†–µ–∞–∫—Ü–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞: {matched_tag['emoji']} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}")
        
        log_bot_event('reaction_set', {
            'emoji': matched_tag['emoji'],
            'user': message.from_user.username or message.from_user.first_name,
            'tag': matched_tag['tag']
        })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥
        logger.debug("üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥...")
        await send_reaction_data(message, matched_tag, media_info, thread_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if matched_tag['reply_ok']:
            await message.reply_text(matched_tag['reply_ok'])
            logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ: {matched_tag['reply_ok']}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
        append_log(message, matched_tag, thread_name, media_info)
        logger.debug("üìù –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –ª–æ–≥")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")
        log_bot_event('error', {'message': f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}"})

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_info = f"{update.effective_user.username or update.effective_user.first_name} (ID: {update.effective_user.id})"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–¥ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥—ã
    if context.args and len(context.args) > 0:
        code = context.args[0].strip()
        logger.info(f"üîó –ö–æ–º–∞–Ω–¥–∞ /start —Å –∫–æ–¥–æ–º –æ—Ç {user_info}: {code[:8]}...")
        await handle_link_code(update, code)
    else:
        logger.info(f"üëã –ö–æ–º–∞–Ω–¥–∞ /start (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ) –æ—Ç {user_info}")
        # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø Anyway bot.\n\n"
            "–Ø —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —â–æ–± –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ —Ç–≤—ñ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∞—É–Ω—Ç –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ.\n\n"
            "–©–æ–± –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç, –ø–µ—Ä–µ–π–¥–∏ –≤ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –Ω–∞ [–ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ](https://anywayfit.com/profile/edit) —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–≤'—è–∑–∞—Ç–∏ Telegram'",
            parse_mode='Markdown'
        )
        logger.debug("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

async def handle_link_code(update: Update, code: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user = update.effective_user
    
    if not user:
        await update.message.reply_text("üö´ –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –ø—É—Å—Ç—ã–º)
    if not code or len(code.strip()) < 3:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥—É")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    processing_message = await update.message.reply_text("‚è≥ –û–±—Ä–æ–±–ª—è—é –∑–∞–ø–∏—Ç...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥
    logger.info(f"üîó –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: user_id={user.id}, code={code[:8]}...")
    
    result = await link_telegram_account(
        code=code.strip(),
        user_id=user.id,
        username=user.username or "",
        first_name=user.first_name or "",
        last_name=user.last_name or ""
    )
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    try:
        await processing_message.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if not result["success"]:
        if "error" in result:
            await update.message.reply_text("üö´ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏: {result['error']}")
        else:
            await handle_backend_response(update, result)
    else:
        await handle_backend_response(update, result)

async def handle_backend_response(update: Update, result: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±—ç–∫–µ–Ω–¥–∞"""
    status_code = result.get("status_code", 0)
    data = result.get("data", {})
    
    if status_code == 200 and data.get("status") == "linked":
        await update.message.reply_text("‚úÖ –ê–∫–∞—É–Ω—Ç –ø—Ä–∏–≤'—è–∑–∞–Ω–æ")
        logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω: user_id={update.effective_user.id}")
        
    elif status_code == 400:
        error_type = data.get("error", "")
        if error_type == "invalid_or_expired_code":
            await update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ —Å—Ç—Ä–æ–∫ –¥—ñ—ó –º–∏–Ω—É–≤")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç")
            
    elif status_code == 409:
        error_type = data.get("error", "")
        if error_type == "tg_already_linked_to_another_user":
            await update.message.reply_text("‚ö†Ô∏è –¶–µ–π Telegram –≤–∂–µ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ —ñ–Ω—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ö–æ–Ω—Ñ–ª—ñ–∫—Ç –¥–∞–Ω–∏—Ö")
            
    else:
        await update.message.reply_text("üö´ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ç–∫–µ–Ω–¥–∞: status={status_code}, data={data}")

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∫–æ–¥—ã –ø—Ä–∏–≤—è–∑–∫–∏)"""
    message = update.message
    if not message or not message.text:
        return
    
    text = message.text.strip()
    user_info = f"{message.from_user.username or message.from_user.first_name} (ID: {message.from_user.id})"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–¥–æ–º –ø—Ä–∏–≤—è–∑–∫–∏
    # –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–µ—à—Ç–µ–≥–æ–≤
    if (len(text) <= 100 and 
        not text.startswith('/') and 
        '#' not in text and 
        len(text.split()) == 1):  # –û–¥–∏–Ω —Ç–æ–∫–µ–Ω –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –æ–±—ã—á–Ω–æ–µ —Å–ª–æ–≤–æ (–∫–æ–¥—ã –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)
        if any(c.isdigit() or c in '-_' for c in text):
            logger.info(f"üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ –æ—Ç {user_info}: {text[:8]}...")
            await handle_link_code(update, text)
            return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏, –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    logger.debug(f"üìù –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_info}, –ø–µ—Ä–µ–¥–∞–µ–º –≤ handle_any")
    await handle_any(update, context)

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–∞–∫—Ü–∏–π"""
    await process_reaction_queue(context)
    await update.message.reply_text("üß™ –ß–µ—Ä–≥–∞ —Ä–µ–∞–∫—Ü—ñ–π –æ–±—Ä–æ–±–ª–µ–Ω–∞")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"üö® –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å update
    if isinstance(update, Update) and update.effective_message:
        logger.error(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {update.effective_message.text}")
        logger.error(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.username if update.effective_user else 'Unknown'}")
        logger.error(f"üí¨ –ß–∞—Ç: {update.effective_chat.id if update.effective_chat else 'Unknown'}")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ —Å–æ–±—ã—Ç–∏–π
    log_bot_event('error', {
        'message': str(context.error),
        'update_type': type(update).__name__ if update else 'Unknown'
    })

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    logger.info(f"üìÅ –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db.db_path}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        db.init_database()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(BOT_TOKEN).build()
    logger.debug("üîß Telegram Application —Å–æ–∑–¥–∞–Ω")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("test", test_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    app.add_handler(MessageHandler(filters.ALL & ~filters.TEXT, handle_any))
    logger.info("üìã –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)
    logger.debug("üö® –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–∞–∫—Ü–∏–π
    try:
        job_queue = app.job_queue
        if job_queue:
            job_queue.run_repeating(process_reaction_queue, interval=5, first=1)
            logger.info("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥)")
        else:
            logger.warning("‚ö†Ô∏è JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ–ª–ª–±—ç–∫")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({e}), –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ–ª–ª–±—ç–∫ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
    
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("üîç –û–∂–∏–¥–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
