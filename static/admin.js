// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let authToken = localStorage.getItem('adminToken') || '';
let currentTags = [];
let currentTagId = null;

// API –±–∞–∑–æ–≤—ã–π URL
const API_BASE = '/api';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    if (authToken) {
        document.getElementById('tokenInput').value = authToken;
        showAdminPanel();
        loadAllData();
    } else {
        showLoginPrompt();
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º
    document.getElementById('tagForm').addEventListener('submit', saveTag);
    document.getElementById('addTagBtn').addEventListener('click', () => openTagModal());
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –≤ –ø–æ–ª–µ —Ç–æ–∫–µ–Ω–∞
    document.getElementById('loginToken').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            login();
        }
    });
    
    document.getElementById('tokenInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            login();
        }
    });
});

// === –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ===
function login() {
    const token = document.getElementById('loginToken').value || document.getElementById('tokenInput').value;
    if (!token) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω', 'error');
        return;
    }
    
    authToken = token;
    localStorage.setItem('adminToken', token);
    document.getElementById('tokenInput').value = token;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∑–∞–ø—Ä–æ—Å–æ–º –∫ API
    apiRequest('GET', '/stats')
        .then(() => {
            showAdminPanel();
            loadAllData();
            showNotification('–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'success');
        })
        .catch(() => {
            logout();
            showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω', 'error');
        });
}

function logout() {
    authToken = '';
    localStorage.removeItem('adminToken');
    document.getElementById('tokenInput').value = '';
    document.getElementById('loginToken').value = '';
    showLoginPrompt();
}

function showLoginPrompt() {
    document.getElementById('loginPrompt').style.display = 'flex';
    document.getElementById('adminPanel').style.display = 'none';
    document.getElementById('loginBtn').style.display = 'inline-block';
    document.getElementById('logoutBtn').style.display = 'none';
}

function showAdminPanel() {
    document.getElementById('loginPrompt').style.display = 'none';
    document.getElementById('adminPanel').style.display = 'block';
    document.getElementById('loginBtn').style.display = 'none';
    document.getElementById('logoutBtn').style.display = 'inline-block';
}

// === API –ó–ê–ü–†–û–°–´ ===
async function apiRequest(method, endpoint, data = null) {
    const url = `${API_BASE}${endpoint}`;
    const options = {
        method: method,
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${authToken}`
        }
    };
    
    if (data) {
        options.body = JSON.stringify(data);
    }
    
    const response = await fetch(url, options);
    const result = await response.json();
    
    if (!response.ok) {
        throw new Error(result.message || 'API Error');
    }
    
    if (!result.success) {
        throw new Error(result.message || 'Request failed');
    }
    
    return result;
}

// === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===
async function loadAllData() {
    try {
        await Promise.all([
            loadTags(),
            loadStats(),
            loadLogs()
        ]);
    } catch (error) {
        console.error('Error loading data:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message, 'error');
    }
}


async function loadTags() {
    try {
        const tagsResponse = await apiRequest('GET', '/tags');
        currentTags = tagsResponse.data;
        renderTags();
        updateTagFilter();
    } catch (error) {
        console.error('Error loading tags:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤: ' + error.message, 'error');
    }
}

async function loadStats() {
    try {
        const statsResponse = await apiRequest('GET', '/stats');
        const stats = statsResponse.data;
        
        document.getElementById('totalLogs').textContent = stats.total_logs || 0;
        document.getElementById('totalTags').textContent = currentTags.length || 0;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ø —Ç–µ–≥–æ–≤
        const topTagsContainer = document.getElementById('topTags');
        topTagsContainer.innerHTML = '';
        
        if (stats.tag_stats && stats.tag_stats.length > 0) {
            stats.tag_stats.slice(0, 10).forEach(tagStat => {
                const tagElement = document.createElement('div');
                tagElement.className = 'tag-stat';
                tagElement.innerHTML = `
                    <span class="tag">${tagStat.tag}</span>
                    <span class="count">${tagStat.count}</span>
                `;
                topTagsContainer.appendChild(tagElement);
            });
        } else {
            topTagsContainer.innerHTML = '<div style="color: #94a3b8; text-align: center; padding: 20px;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
        }
        
    } catch (error) {
        console.error('Error loading stats:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' + error.message, 'error');
    }
}

// –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è loadLogs —É–¥–∞–ª–µ–Ω–∞ (–±—ã–ª–∞ –¥—É–±–ª–∏—Ä—É—é—â–∞—è—Å—è)

// === –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –î–ê–ù–ù–´–• ===
function renderTags() {
    const container = document.getElementById('tagsList');
    container.innerHTML = '';
    
    if (currentTags.length === 0) {
        container.innerHTML = '<div style="color: #94a3b8; text-align: center; padding: 20px;">–¢–µ–≥–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</div>';
        return;
    }
    
    currentTags.forEach((tag, index) => {
        const tagElement = document.createElement('div');
        tagElement.className = 'tag-item';
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–≥–∞ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const matchMode = tag.match_mode || 'equals';
        const requirePhoto = tag.require_photo !== undefined ? tag.require_photo : true;
        const replyOk = tag.reply_ok || '';
        const replyNeedPhoto = tag.reply_need_photo || '';
        const threadName = tag.thread_name || '';
        
        tagElement.innerHTML = `
            <div class="tag-info">
                <div class="tag-field">
                    <label>–¢–µ–≥</label>
                    <div class="value">${tag.tag}</div>
                </div>
                <div class="tag-field">
                    <label>–†–µ–∞–∫—Ü–∏—è</label>
                    <div class="value">${tag.emoji}</div>
                </div>
                <div class="tag-field">
                    <label>–ó–∞–¥–µ—Ä–∂–∫–∞</label>
                    <div class="value">${tag.delay || 0} —Å–µ–∫</div>
                </div>
                <div class="tag-field">
                    <label>–†–µ–∂–∏–º</label>
                    <div class="value">${matchMode === 'prefix' ? '–ü—Ä–µ—Ñ–∏–∫—Å' : '–°—Ç—Ä–æ–≥–∏–π'}</div>
                </div>
                <div class="tag-field">
                    <label>–ú–µ–¥–∏–∞</label>
                    <div class="value">${requirePhoto ? '‚úÖ –¢—Ä–µ–±—É–µ—Ç—Å—è' : '‚ùå –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}</div>
                </div>
                <div class="tag-field">
                    <label>–¢—Ä–µ–¥</label>
                    <div class="value">${threadName || 'üåê –õ—é–±–æ–π'}</div>
                </div>
                <div class="tag-field">
                    <label>–ú–æ–¥–µ—Ä–∞—Ü–∏—è</label>
                    <div class="value">${tag.moderation_enabled ? 'üîç –í–∫–ª—é—á–µ–Ω–∞' : '‚ö° –ê–≤—Ç–æ'}</div>
                </div>
            </div>
            <div class="tag-actions">
                <button class="btn btn-secondary btn-small" onclick="editTag('${tag.id}')">‚úèÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å</button>
                <button class="btn btn-danger btn-small" onclick="deleteTag('${tag.id}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;
        container.appendChild(tagElement);
    });
}

function renderLogs(logs) {
    const container = document.getElementById('logsContainer');
    container.innerHTML = '';
    
    if (!logs || logs.length === 0) {
        container.innerHTML = '<div style="color: #94a3b8; text-align: center; padding: 20px;">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π</div>';
        return;
    }
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    const header = document.createElement('div');
    header.className = 'log-header';
    header.innerHTML = `
        <div>–í—Ä–µ–º—è (UTC)</div>
        <div>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</div>
        <div>–ß–∞—Ç</div>
        <div>–¢–µ–≥–∏</div>
        <div>–¢–µ–∫—Å—Ç</div>
    `;
    container.appendChild(header);
    
    // –ó–∞–ø–∏—Å–∏
    logs.forEach(log => {
        const logElement = document.createElement('div');
        logElement.className = 'log-item';
        
        const time = log.when ? new Date(log.when).toLocaleString('ru-RU') : '-';
        const user = log.user || '-';
        const chat = log.chat || '-';
        const tags = (log.tags || []).join(', ') || '-';
        const text = (log.text || log.caption || '').substring(0, 100) + 
                    ((log.text || log.caption || '').length > 100 ? '...' : '');
        
        logElement.innerHTML = `
            <div class="log-time">${time}</div>
            <div class="log-user">${escapeHtml(user)}</div>
            <div class="log-chat">${escapeHtml(chat)}</div>
            <div class="log-tags">${escapeHtml(tags)}</div>
            <div class="log-text">${escapeHtml(text)}</div>
        `;
        container.appendChild(logElement);
    });
}

function updateTagFilter() {
    const select = document.getElementById('logTagFilter');
    const currentValue = select.value;
    
    // –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–≤—Å–µ"
    select.innerHTML = '<option value="">(–≤—Å–µ)</option>';
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
    const uniqueTags = [...new Set(currentTags.map(tag => tag.tag))];
    uniqueTags.forEach(tag => {
        const option = document.createElement('option');
        option.value = tag;
        option.textContent = tag;
        if (tag === currentValue) {
            option.selected = true;
        }
        select.appendChild(option);
    });
}

// === –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ===

async function saveTag(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const tagData = {
        tag: formData.get('tag'),
        emoji: formData.get('emoji'),
        delay: parseInt(formData.get('delay')) || 0,
        match_mode: formData.get('match_mode'),
        require_photo: formData.get('require_photo') === 'true',
        reply_ok: formData.get('reply_ok') || '',
        reply_need_photo: formData.get('reply_need_photo') || '',
        thread_name: formData.get('thread_name') || '',
        reply_duplicate: formData.get('reply_duplicate') || '',
        moderation_enabled: formData.get('moderation_enabled') === 'true',
        reply_pending: formData.get('reply_pending') || ''
    };
    
    try {
        if (currentTagId === null) {
            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞
            await apiRequest('POST', '/tags', tagData);
            showNotification('–¢–µ–≥ —Å–æ–∑–¥–∞–Ω', 'success');
        } else {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–≥–∞
            await apiRequest('PUT', `/tags/${currentTagId}`, tagData);
            showNotification('–¢–µ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
        }
        
        closeTagModal();
        await loadTags();
        await loadStats();
        
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–≥–∞: ' + error.message, 'error');
    }
}

async function deleteTag(tagId) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–≥?')) {
        return;
    }
    
    try {
        await apiRequest('DELETE', `/tags/${tagId}`);
        showNotification('–¢–µ–≥ —É–¥–∞–ª–µ–Ω', 'success');
        await loadTags();
        await loadStats();
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞: ' + error.message, 'error');
    }
}

// === –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û ===
function openTagModal(tagId = null) {
    currentTagId = tagId;
    const modal = document.getElementById('tagModal');
    const form = document.getElementById('tagForm');
    
    if (tagId === null) {
        // –ù–æ–≤—ã–π —Ç–µ–≥ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        document.getElementById('modalTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥';
        form.reset();
        document.getElementById('modalMatchMode').value = 'equals';
        document.getElementById('modalRequirePhoto').value = 'true';
        document.getElementById('modalReplyOk').value = '–ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ! ü¶ã';
        document.getElementById('modalReplyNeedPhoto').value = '–©–æ–± –∑–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ ‚Äî –¥–æ–¥–∞–π —Ñ–æ—Ç–æ —ñ –ø–æ–≤—Ç–æ—Ä–∏ –∑ —Ö–µ—à—Ç–µ–≥–æ–º.';
        document.getElementById('modalThreadName').value = '';
        document.getElementById('modalReplyDuplicate').value = '';
        document.getElementById('modalModerationEnabled').value = 'false';
        document.getElementById('modalReplyPending').value = '';
    } else {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–≥–∞
        document.getElementById('modalTitle').textContent = '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–≥';
        const tag = currentTags.find(t => t.id === tagId);
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–≥–∞
        document.getElementById('modalTag').value = tag.tag;
        document.getElementById('modalEmoji').value = tag.emoji;
        document.getElementById('modalDelay').value = tag.delay || 0;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        document.getElementById('modalMatchMode').value = tag.match_mode || 'equals';
        document.getElementById('modalRequirePhoto').value = tag.require_photo !== undefined ? tag.require_photo.toString() : 'true';
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        document.getElementById('modalReplyOk').value = tag.reply_ok || '–ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ! ü¶ã';
        document.getElementById('modalReplyNeedPhoto').value = tag.reply_need_photo || '–©–æ–± –∑–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ ‚Äî –¥–æ–¥–∞–π —Ñ–æ—Ç–æ —ñ –ø–æ–≤—Ç–æ—Ä–∏ –∑ —Ö–µ—à—Ç–µ–≥–æ–º.';
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–¥–∞
        document.getElementById('modalThreadName').value = tag.thread_name || '';
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        document.getElementById('modalReplyDuplicate').value = tag.reply_duplicate || '';
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        document.getElementById('modalModerationEnabled').value = tag.moderation_enabled ? 'true' : 'false';
        document.getElementById('modalReplyPending').value = tag.reply_pending || '';
    }
    
    modal.style.display = 'block';
}

function closeTagModal() {
    document.getElementById('tagModal').style.display = 'none';
    currentTagId = null;
}

function editTag(tagId) {
    openTagModal(tagId);
}

// === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===
function showNotification(message, type = 'info') {
    const container = document.getElementById('notifications');
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    container.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 5000);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∏–∫—É
    notification.addEventListener('click', () => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    });
}

// === –£–¢–ò–õ–ò–¢–´ ===
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===
// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
window.addEventListener('click', function(event) {
    const modal = document.getElementById('tagModal');
    if (event.target === modal) {
        closeTagModal();
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        closeTagModal();
    }
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
setInterval(() => {
    if (authToken && document.getElementById('adminPanel').style.display !== 'none') {
        loadStats();
    }
}, 30000);

// ========= –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∞–º–∏ =========
function showTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    const tabs = document.querySelectorAll('.tab-content');
    tabs.forEach(tab => tab.style.display = 'none');
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    const buttons = document.querySelectorAll('.tab-btn');
    buttons.forEach(btn => btn.classList.remove('active'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const targetTab = document.getElementById(tabName + 'Tab');
    if (targetTab) {
        targetTab.style.display = 'block';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –∫–Ω–æ–ø–∫–µ
    event.target.classList.add('active');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
    try {
        if (tabName === 'stats') {
            loadStats();
        } else if (tabName === 'logs') {
            loadLogs();
        } else if (tabName === 'tags') {
            loadAllData();
        } else if (tabName === 'moderation') {
            console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏...');
            loadModerationData();
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ ${tabName}:`, error);
        showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∫–ª–∞–¥–∫–∏ ${tabName}`, 'error');
    }
}

// ========= API –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ =========
function testEndpoint(method, path) {
    const tester = document.getElementById('apiTester');
    const methodBadge = document.getElementById('testMethod');
    const urlInput = document.getElementById('testUrl');
    const bodyGroup = document.getElementById('testBodyGroup');
    const bodyTextarea = document.getElementById('testBody');
    const resultDiv = document.getElementById('testResult');
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É
    methodBadge.textContent = method;
    methodBadge.className = `method-badge method ${method.toLowerCase()}`;
    urlInput.value = window.location.origin + path;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –¥–ª—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    if (method === 'GET' || method === 'DELETE') {
        bodyGroup.style.display = 'none';
        bodyTextarea.value = '';
    } else {
        bodyGroup.style.display = 'block';
        bodyTextarea.value = '{}';
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    resultDiv.style.display = 'none';
    tester.style.display = 'block';
    tester.scrollIntoView({ behavior: 'smooth' });
}

function showTestForm(method, path, type) {
    testEndpoint(method, path);
    
    const bodyTextarea = document.getElementById('testBody');
    
    // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏–º–µ—Ä–∞–º–∏
    if (type === 'tag') {
        bodyTextarea.value = JSON.stringify({
            "tag": "#api_test",
            "emoji": "üß™",
            "delay": 0,
            "match_mode": "equals",
            "require_photo": false,
            "reply_ok": "API —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª!",
            "reply_need_photo": "–î–æ–±–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª",
            "thread_name": "",
            "reply_duplicate": "–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        }, null, 2);
    }
}

async function executeApiTest() {
    const method = document.getElementById('testMethod').textContent;
    const url = document.getElementById('testUrl').value;
    const bodyTextarea = document.getElementById('testBody');
    const resultDiv = document.getElementById('testResult');
    const resultContent = document.getElementById('testResultContent');
    
    try {
        const options = {
            method: method,
            headers: {
                'Authorization': `Bearer ${authToken}`,
                'Content-Type': 'application/json'
            }
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (method !== 'GET' && method !== 'DELETE' && bodyTextarea.value.trim()) {
            try {
                JSON.parse(bodyTextarea.value); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
                options.body = bodyTextarea.value;
            } catch (e) {
                throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞: ' + e.message);
            }
        }
        
        const response = await fetch(url, options);
        const data = await response.json();
        
        const result = {
            status: response.status,
            statusText: response.statusText,
            headers: Object.fromEntries(response.headers.entries()),
            body: data
        };
        
        resultContent.textContent = JSON.stringify(result, null, 2);
        resultDiv.style.display = 'block';
        
        if (response.ok) {
            resultContent.style.color = '#10b981';
        } else {
            resultContent.style.color = '#ef4444';
        }
        
    } catch (error) {
        resultContent.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
        resultContent.style.color = '#ef4444';
        resultDiv.style.display = 'block';
    }
}

function hideTestForm() {
    document.getElementById('apiTester').style.display = 'none';
}

// ========= –£—Ç–∏–ª–∏—Ç—ã =========
function escapeHtml(text) {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// ========= –ú–æ–¥–µ—Ä–∞—Ü–∏—è =========
async function loadModerationData() {
    console.log('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏...');
    try {
        await Promise.all([
            loadModerationStats(),
            loadModerationQueue()
        ]);
        console.log('–î–∞–Ω–Ω—ã–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏', 'error');
    }
}

async function loadModerationStats() {
    try {
        const response = await apiRequest('GET', '/stats');
        const stats = response.data?.moderation || { pending: 0, approved: 0, rejected: 0, total: 0 };
        
        document.getElementById('pendingCount').textContent = stats.pending || 0;
        document.getElementById('approvedCount').textContent = stats.approved || 0;
        document.getElementById('rejectedCount').textContent = stats.rejected || 0;
        document.getElementById('totalModerationCount').textContent = stats.total || 0;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', error);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        document.getElementById('pendingCount').textContent = '-';
        document.getElementById('approvedCount').textContent = '-';
        document.getElementById('rejectedCount').textContent = '-';
        document.getElementById('totalModerationCount').textContent = '-';
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', 'error');
    }
}

async function loadModerationQueue() {
    try {
        const container = document.getElementById('moderationItems');
        if (!container) {
            console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä moderationItems –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        container.innerHTML = '<div class="moderation-loading">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏...</div>';
        
        const response = await apiRequest('GET', '/moderation');
        const items = response.data || [];
        
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', {
            success: response.success,
            itemsCount: items.length,
            items: items
        });
        
        if (!Array.isArray(items) || items.length === 0) {
            container.innerHTML = `
                <div class="moderation-empty">
                    <div class="moderation-empty-icon">‚úÖ</div>
                    <h4>–û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç–∞</h4>
                    <p>–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.</p>
                </div>
            `;
            return;
        }
        
        container.innerHTML = '';
        items.forEach((item, index) => {
            try {
                console.log(`–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ${index}:`, item);
                const itemElement = createModerationItemElement(item);
                container.appendChild(itemElement);
                console.log(`–≠–ª–µ–º–µ–Ω—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ${index} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω`);
            } catch (itemError) {
                console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ${index}:`, itemError, item);
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', error);
        const container = document.getElementById('moderationItems');
        if (container) {
            container.innerHTML = `
                <div class="moderation-empty">
                    <div class="moderation-empty-icon">‚ùå</div>
                    <h4>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h4>
                    <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p>
                </div>
            `;
        }
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', 'error');
    }
}

function createModerationItemElement(item) {
    if (!item || !item.id) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
    }
    
    const element = document.createElement('div');
    element.className = 'moderation-item';
    element.setAttribute('data-id', item.id);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    let formattedDate = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    try {
        if (item.created_at) {
            const date = new Date(item.created_at);
            formattedDate = date.toLocaleString('ru-RU');
        }
    } catch (dateError) {
        console.warn('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', dateError);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–¥–∏–∞-–±–µ–π–¥–∂–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    const mediaBadges = [];
    const mediaInfo = item.media_info || {};
    if (mediaInfo.has_photo) mediaBadges.push('<span class="media-badge">üì∑ –§–æ—Ç–æ</span>');
    if (mediaInfo.has_video) mediaBadges.push('<span class="media-badge">üé• –í–∏–¥–µ–æ</span>');
    if (mediaInfo.has_document) mediaBadges.push('<span class="media-badge">üìÑ –î–æ–∫—É–º–µ–Ω—Ç</span>');
    if (mediaInfo.has_audio) mediaBadges.push('<span class="media-badge">üéµ –ê—É–¥–∏–æ</span>');
    if (mediaInfo.has_sticker) mediaBadges.push('<span class="media-badge">üé≠ –°—Ç–∏–∫–µ—Ä</span>');
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    const username = escapeHtml(item.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    const tag = escapeHtml(item.tag || '#unknown');
    const emoji = item.emoji || '‚ùì';
    const text = item.text ? escapeHtml(item.text) : '';
    const caption = item.caption ? escapeHtml(item.caption) : '';
    const threadName = item.thread_name ? escapeHtml(item.thread_name) : '';
    
    element.innerHTML = `
        <div class="moderation-header">
            <div class="moderation-info">
                <div class="moderation-user">üë§ ${username}</div>
                <div class="moderation-tag">
                    <span>${emoji}</span>
                    <span>${tag}</span>
                </div>
                <div class="moderation-meta">
                    <span>üÜî <span class="moderation-id">${item.id}</span></span>
                    <span>üïí ${formattedDate}</span>
                    ${threadName ? `<span>üßµ ${threadName}</span>` : ''}
                </div>
            </div>
        </div>
        
        <div class="moderation-content">
            ${text ? `<div class="moderation-text">${text}</div>` : ''}
            ${caption ? `<div class="moderation-caption">üìù ${caption}</div>` : ''}
            ${mediaBadges.length > 0 ? `<div class="moderation-media-badges">${mediaBadges.join('')}</div>` : ''}
            ${generateMediaPreview(mediaInfo)}
        </div>
        
        <div class="moderation-actions">
            <button class="btn-reject" onclick="rejectModeration('${item.id}')">
                ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
            </button>
            <button class="btn-approve" onclick="approveModeration('${item.id}')">
                ‚úÖ –û–¥–æ–±—Ä–∏—Ç—å
            </button>
        </div>
    `;
    
    return element;
}

async function approveModeration(itemId) {
    try {
        await apiRequest('POST', `/moderation/${itemId}/approve`);
        showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ', 'success');
        
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const element = document.querySelector(`[data-id="${itemId}"]`);
        if (element) {
            element.style.opacity = '0.5';
            element.style.pointerEvents = 'none';
            setTimeout(() => {
                element.remove();
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞–ª–∞ –ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–æ–π
                const container = document.getElementById('moderationItems');
                if (container.children.length === 0) {
                    loadModerationQueue();
                }
            }, 500);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        loadModerationStats();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
    }
}

async function rejectModeration(itemId) {
    try {
        await apiRequest('POST', `/moderation/${itemId}/reject`);
        showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', 'success');
        
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const element = document.querySelector(`[data-id="${itemId}"]`);
        if (element) {
            element.style.opacity = '0.5';
            element.style.pointerEvents = 'none';
            setTimeout(() => {
                element.remove();
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞–ª–∞ –ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–æ–π
                const container = document.getElementById('moderationItems');
                if (container.children.length === 0) {
                    loadModerationQueue();
                }
            }, 500);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        loadModerationStats();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
    }
}

// === –§–£–ù–ö–¶–ò–ò –ù–ê–í–ò–ì–ê–¶–ò–ò (–¥—É–±–ª–∏—Ä—É—é—â–∞—è—Å—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞) ===

// === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –õ–û–ì–ê–ú–ò ===

async function loadLogs() {
    try {
        const tagFilter = document.getElementById('logTagFilter')?.value || '';
        const limit = document.getElementById('logLimit')?.value || 50;
        
        let url = `/logs?limit=${limit}`;
        if (tagFilter) {
            url += `&tag=${encodeURIComponent(tagFilter)}`;
        }
        
        const response = await apiRequest('GET', url);
        
        if (response.success) {
            renderLogs(response.data || []);
            updateLogTagFilter();
        } else {
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: ' + response.message, 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤', 'error');
    }
}

function renderLogs(logs) {
    const container = document.getElementById('logsContainer');
    if (!container) return;
    
    if (!logs || logs.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üìù</div>
                <h3>–õ–æ–≥–∏ –ø—É—Å—Ç—ã</h3>
                <p>–õ–æ–≥–∏ –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∫–æ–≥–¥–∞ –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–≥–∞–º–∏</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = logs.map(log => `
        <div class="log-item">
            <div class="log-main">
                <div class="log-user-info">
                    <div class="log-user-avatar">${(log.username || 'U')[0].toUpperCase()}</div>
                    <div class="log-user-details">
                        <div class="log-user-name">${escapeHtml(log.username || 'Unknown User')}</div>
                        <div class="log-time">${formatDateTime(log.timestamp)}</div>
                    </div>
                </div>
                
                <div class="log-action">
                    <div class="log-trigger">${escapeHtml(log.trigger)}</div>
                    <div class="log-reaction">${log.emoji}</div>
                </div>
            </div>
            
            <div class="log-meta">
                <div class="log-chat-info">
                    üí¨ ${log.chat_id.toString().slice(-8)}...
                    ${log.thread_name ? `<span class="log-thread-name">üßµ ${escapeHtml(log.thread_name)}</span>` : ''}
                </div>
                
                <div class="log-extras">
                    ${log.media_type ? `
                        <div class="log-media-preview" onclick="showMediaModal(${log.chat_id}, ${log.message_id}, '${log.media_type}')">
                            <span class="media-icon">${log.media_type === 'photo' ? 'üñºÔ∏è' : 'üé•'}</span>
                            <span class="media-text">–ü–æ–∫–∞–∑–∞—Ç—å ${log.media_type === 'photo' ? '—Ñ–æ—Ç–æ' : '–≤–∏–¥–µ–æ'}</span>
                        </div>
                    ` : ''}
                    ${log.caption ? `<span class="log-caption">"${escapeHtml(log.caption.slice(0, 50))}${log.caption.length > 50 ? '...' : ''}"</span>` : ''}
                </div>
            </div>
        </div>
    `).join('');
}

async function clearLogs() {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        return;
    }
    
    try {
        const response = await apiRequest('DELETE', '/logs');
        
        if (response.success) {
            const data = response.data || {};
            const message = `–û—á–∏—â–µ–Ω–æ: ${data.deleted_logs || 0} –ª–æ–≥–æ–≤, ${data.deleted_reactions || 0} —Ä–µ–∞–∫—Ü–∏–π, ${data.deleted_moderation || 0} –º–æ–¥–µ—Ä–∞—Ü–∏–π`;
            showNotification(message, 'success');
            await loadLogs(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏
        } else {
            showNotification('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: ' + response.message, 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤', 'error');
    }
}

function updateLogTagFilter() {
    const select = document.getElementById('logTagFilter');
    if (!select || !currentTags) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const currentValue = select.value;
    
    // –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
    select.innerHTML = '<option value="">(–≤—Å–µ)</option>';
    
    currentTags.forEach(tag => {
        const option = document.createElement('option');
        option.value = tag.tag;
        option.textContent = tag.tag;
        select.appendChild(option);
    });
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    select.value = currentValue;
}

function formatDateTime(timestamp) {
    try {
        const date = new Date(timestamp);
        return date.toLocaleString('ru-RU', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    } catch (error) {
        return timestamp;
    }
}

// === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –ú–ï–î–ò–ê ===

function generateMediaPreview(mediaInfo) {
    if (!mediaInfo) {
        return '';
    }
    
    const hasAnyMedia = mediaInfo.has_photo || mediaInfo.has_video || 
                       mediaInfo.has_document || mediaInfo.has_audio || 
                       mediaInfo.has_sticker;
    
    if (!hasAnyMedia) {
        return '';
    }
    
    const previews = [];
    
    // –ü—Ä–µ–≤—å—é —Ñ–æ—Ç–æ (–≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞)
    if (mediaInfo.has_photo && mediaInfo.photo_file_ids && mediaInfo.photo_file_ids.length > 0) {
        mediaInfo.photo_file_ids.forEach((fileId, index) => {
            const photoCount = mediaInfo.photo_file_ids.length;
            const label = photoCount > 1 ? `–§–æ—Ç–æ ${index + 1}/${photoCount}` : '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ';
            
            previews.push(`
                <div class="moderation-media-preview" onclick="showModerationMediaGroup(${JSON.stringify(mediaInfo.photo_file_ids).replace(/"/g, '&quot;')}, 'photo', ${index})">
                    <div class="media-preview-placeholder">
                        <div class="media-icon">üñºÔ∏è</div>
                        <div class="media-text">${label}</div>
                    </div>
                </div>
            `);
        });
    }
    
    // –ü—Ä–µ–≤—å—é –≤–∏–¥–µ–æ (–≤—Å–µ –≤–∏–¥–µ–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞)
    if (mediaInfo.has_video && mediaInfo.video_file_ids && mediaInfo.video_file_ids.length > 0) {
        mediaInfo.video_file_ids.forEach((fileId, index) => {
            const videoCount = mediaInfo.video_file_ids.length;
            const label = videoCount > 1 ? `–í–∏–¥–µ–æ ${index + 1}/${videoCount}` : '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ';
            
            previews.push(`
                <div class="moderation-media-preview" onclick="showModerationMediaGroup(${JSON.stringify(mediaInfo.video_file_ids).replace(/"/g, '&quot;')}, 'video', ${index})">
                    <div class="media-preview-placeholder">
                        <div class="media-icon">üé•</div>
                        <div class="media-text">${label}</div>
                    </div>
                </div>
            `);
        });
    }
    
    // –ü—Ä–µ–≤—å—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞)
    if (mediaInfo.has_document && mediaInfo.document_file_ids && mediaInfo.document_file_ids.length > 0) {
        mediaInfo.document_file_ids.forEach((fileId, index) => {
            const docCount = mediaInfo.document_file_ids.length;
            const label = docCount > 1 ? `–î–æ–∫—É–º–µ–Ω—Ç ${index + 1}/${docCount}` : '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞';
            
            previews.push(`
                <div class="moderation-media-preview" onclick="showModerationMediaGroup(${JSON.stringify(mediaInfo.document_file_ids).replace(/"/g, '&quot;')}, 'document', ${index})">
                    <div class="media-preview-placeholder">
                        <div class="media-icon">üìÑ</div>
                        <div class="media-text">${label}</div>
                    </div>
                </div>
            `);
        });
    }
    
    // –ü—Ä–µ–≤—å—é –∞—É–¥–∏–æ (–≤—Å–µ –∞—É–¥–∏–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞)
    if (mediaInfo.has_audio && mediaInfo.audio_file_ids && mediaInfo.audio_file_ids.length > 0) {
        mediaInfo.audio_file_ids.forEach((fileId, index) => {
            const audioCount = mediaInfo.audio_file_ids.length;
            const label = audioCount > 1 ? `–ê—É–¥–∏–æ ${index + 1}/${audioCount}` : '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ';
            
            previews.push(`
                <div class="moderation-media-preview" onclick="showModerationMediaGroup(${JSON.stringify(mediaInfo.audio_file_ids).replace(/"/g, '&quot;')}, 'audio', ${index})">
                    <div class="media-preview-placeholder">
                        <div class="media-icon">üéµ</div>
                        <div class="media-text">${label}</div>
                    </div>
                </div>
            `);
        });
    }
    
    // –ü—Ä–µ–≤—å—é —Å—Ç–∏–∫–µ—Ä–æ–≤ (–≤—Å–µ —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞)
    if (mediaInfo.has_sticker && mediaInfo.sticker_file_ids && mediaInfo.sticker_file_ids.length > 0) {
        mediaInfo.sticker_file_ids.forEach((fileId, index) => {
            const stickerCount = mediaInfo.sticker_file_ids.length;
            const label = stickerCount > 1 ? `–°—Ç–∏–∫–µ—Ä ${index + 1}/${stickerCount}` : '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∏–∫–µ—Ä–∞';
            
            previews.push(`
                <div class="moderation-media-preview" onclick="showModerationMediaGroup(${JSON.stringify(mediaInfo.sticker_file_ids).replace(/"/g, '&quot;')}, 'sticker', ${index})">
                    <div class="media-preview-placeholder">
                        <div class="media-icon">üé≠</div>
                        <div class="media-text">${label}</div>
                    </div>
                </div>
            `);
        });
    }
    
    return previews.length > 0 ? `<div class="moderation-media-container">${previews.join('')}</div>` : '';
}

async function showModerationMediaGroup(fileIds, mediaType, currentIndex = 0) {
    try {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞
        const modal = document.createElement('div');
        modal.className = 'media-modal';
        
        const mediaTypeNames = {
            'photo': 'üñºÔ∏è –§–æ—Ç–æ –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
            'video': 'üé• –í–∏–¥–µ–æ –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', 
            'document': 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
            'audio': 'üéµ –ê—É–¥–∏–æ –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
            'sticker': 'üé≠ –°—Ç–∏–∫–µ—Ä –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'
        };
        
        const totalCount = fileIds.length;
        const title = totalCount > 1 
            ? `${mediaTypeNames[mediaType] || 'üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'} (${currentIndex + 1}/${totalCount})`
            : mediaTypeNames[mediaType] || 'üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏';
        
        modal.innerHTML = `
            <div class="media-modal-content">
                <div class="media-modal-header">
                    <h3>${title}</h3>
                    <div class="media-modal-controls">
                        ${totalCount > 1 ? `
                            <button class="media-nav-btn" onclick="navigateMedia(-1)" ${currentIndex === 0 ? 'disabled' : ''}>‚Äπ –ü—Ä–µ–¥</button>
                            <span class="media-counter">${currentIndex + 1} / ${totalCount}</span>
                            <button class="media-nav-btn" onclick="navigateMedia(1)" ${currentIndex === totalCount - 1 ? 'disabled' : ''}>–°–ª–µ–¥ ‚Ä∫</button>
                        ` : ''}
                        <button class="media-modal-close" onclick="closeMediaModal()">&times;</button>
                    </div>
                </div>
                <div class="media-modal-body">
                    <div class="media-loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞ –∏–∑ Telegram...</div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        window.currentMediaGroup = {
            fileIds: fileIds,
            mediaType: mediaType,
            currentIndex: currentIndex
        };
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeMediaModal();
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        const handleEscape = (e) => {
            if (e.key === 'Escape') {
                closeMediaModal();
                document.removeEventListener('keydown', handleEscape);
            }
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å—Ç—Ä–µ–ª–∫–∞–º–∏
            if (e.key === 'ArrowLeft' && currentIndex > 0) {
                navigateMedia(-1);
            }
            if (e.key === 'ArrowRight' && currentIndex < totalCount - 1) {
                navigateMedia(1);
            }
        };
        document.addEventListener('keydown', handleEscape);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ–¥–∏–∞—Ñ–∞–π–ª
        await loadMediaInModal(fileIds[currentIndex], mediaType);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞', 'error');
    }
}

async function loadMediaInModal(fileId, mediaType) {
    try {
        const response = await apiRequest('GET', `/media/file/${fileId}`);
        const mediaBody = document.querySelector('.media-modal-body');
        
        if (!mediaBody) return;
        
        if (response.success) {
            if (mediaType === 'photo') {
                mediaBody.innerHTML = `
                    <img src="${response.file_url}" 
                         alt="–§–æ—Ç–æ –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏" 
                         class="media-preview-image"
                         onload="this.style.opacity=1"
                         style="opacity:0; transition: opacity 0.3s ease;">
                    <p class="media-info">
                        üìÅ ${response.file_path}<br>
                        üìä –†–∞–∑–º–µ—Ä: ${formatFileSize(response.file_size)}
                    </p>
                `;
            } else if (mediaType === 'video') {
                mediaBody.innerHTML = `
                    <video controls class="media-preview-video" preload="metadata">
                        <source src="${response.file_url}" type="video/mp4">
                        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
                    </video>
                    <p class="media-info">
                        üìÅ ${response.file_path}<br>
                        üìä –†–∞–∑–º–µ—Ä: ${formatFileSize(response.file_size)}
                    </p>
                `;
            } else if (mediaType === 'audio') {
                mediaBody.innerHTML = `
                    <audio controls class="media-preview-audio">
                        <source src="${response.file_url}">
                        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ.
                    </audio>
                    <p class="media-info">
                        üìÅ ${response.file_path}<br>
                        üìä –†–∞–∑–º–µ—Ä: ${formatFileSize(response.file_size)}
                    </p>
                `;
            } else if (mediaType === 'sticker') {
                mediaBody.innerHTML = `
                    <img src="${response.file_url}" 
                         alt="–°—Ç–∏–∫–µ—Ä –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏" 
                         class="media-preview-sticker"
                         onload="this.style.opacity=1"
                         style="opacity:0; transition: opacity 0.3s ease;">
                    <p class="media-info">
                        üìÅ ${response.file_path}<br>
                        üìä –†–∞–∑–º–µ—Ä: ${formatFileSize(response.file_size)}
                    </p>
                `;
            } else {
                // –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã
                mediaBody.innerHTML = `
                    <div class="media-preview-document">
                        <div class="document-icon">üìÑ</div>
                        <div class="document-info">
                            <h4>–î–æ–∫—É–º–µ–Ω—Ç –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</h4>
                            <p>üìÅ ${response.file_path}</p>
                            <p>üìä –†–∞–∑–º–µ—Ä: ${formatFileSize(response.file_size)}</p>
                            <a href="${response.file_url}" target="_blank" class="btn-download">
                                ‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
                            </a>
                        </div>
                    </div>
                `;
            }
        } else {
            mediaBody.innerHTML = `
                <div class="media-error">
                    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞: ${response.message}
                </div>
            `;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ:', error);
        const mediaBody = document.querySelector('.media-modal-body');
        if (mediaBody) {
            mediaBody.innerHTML = `
                <div class="media-error">
                    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞
                </div>
            `;
        }
    }
}

function navigateMedia(direction) {
    if (!window.currentMediaGroup) return;
    
    const { fileIds, mediaType, currentIndex } = window.currentMediaGroup;
    const newIndex = currentIndex + direction;
    
    if (newIndex < 0 || newIndex >= fileIds.length) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    window.currentMediaGroup.currentIndex = newIndex;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏
    const modal = document.querySelector('.media-modal');
    if (modal) {
        const header = modal.querySelector('.media-modal-header h3');
        const prevBtn = modal.querySelector('.media-nav-btn:first-of-type');
        const nextBtn = modal.querySelector('.media-nav-btn:last-of-type');
        const counter = modal.querySelector('.media-counter');
        
        const mediaTypeNames = {
            'photo': 'üñºÔ∏è –§–æ—Ç–æ –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
            'video': 'üé• –í–∏–¥–µ–æ –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', 
            'document': 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
            'audio': 'üéµ –ê—É–¥–∏–æ –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
            'sticker': 'üé≠ –°—Ç–∏–∫–µ—Ä –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'
        };
        
        if (header) {
            header.textContent = `${mediaTypeNames[mediaType] || 'üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'} (${newIndex + 1}/${fileIds.length})`;
        }
        
        if (prevBtn) {
            prevBtn.disabled = newIndex === 0;
        }
        
        if (nextBtn) {
            nextBtn.disabled = newIndex === fileIds.length - 1;
        }
        
        if (counter) {
            counter.textContent = `${newIndex + 1} / ${fileIds.length}`;
        }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª
    loadMediaInModal(fileIds[newIndex], mediaType);
}

async function showModerationMedia(fileId, mediaType) {
    try {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'media-modal';
        const mediaTypeNames = {
            'photo': 'üñºÔ∏è –§–æ—Ç–æ –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
            'video': 'üé• –í–∏–¥–µ–æ –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', 
            'document': 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
            'audio': 'üéµ –ê—É–¥–∏–æ –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
            'sticker': 'üé≠ –°—Ç–∏–∫–µ—Ä –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'
        };
        
        modal.innerHTML = `
            <div class="media-modal-content">
                <div class="media-modal-header">
                    <h3>${mediaTypeNames[mediaType] || 'üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'}</h3>
                    <button class="media-modal-close" onclick="closeMediaModal()">&times;</button>
                </div>
                <div class="media-modal-body">
                    <div class="media-loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞ –∏–∑ Telegram...</div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeMediaModal();
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        const handleEscape = (e) => {
            if (e.key === 'Escape') {
                closeMediaModal();
                document.removeEventListener('keydown', handleEscape);
            }
        };
        document.addEventListener('keydown', handleEscape);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ API
        const response = await apiRequest('GET', `/media/file/${fileId}`);
        const mediaBody = modal.querySelector('.media-modal-body');
        
        if (response.success) {
            if (mediaType === 'photo') {
                mediaBody.innerHTML = `
                    <img src="${response.file_url}" 
                         alt="–§–æ—Ç–æ –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏" 
                         class="media-preview-image"
                         onload="this.style.opacity=1"
                         style="opacity:0; transition: opacity 0.3s ease;">
                    <p class="media-info">
                        üìÅ ${response.file_path}<br>
                        üìä –†–∞–∑–º–µ—Ä: ${formatFileSize(response.file_size)}
                    </p>
                `;
            } else if (mediaType === 'video') {
                mediaBody.innerHTML = `
                    <video controls class="media-preview-video" preload="metadata">
                        <source src="${response.file_url}" type="video/mp4">
                        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
                    </video>
                    <p class="media-info">
                        üìÅ ${response.file_path}<br>
                        üìä –†–∞–∑–º–µ—Ä: ${formatFileSize(response.file_size)}
                    </p>
                `;
            } else if (mediaType === 'audio') {
                mediaBody.innerHTML = `
                    <audio controls class="media-preview-audio">
                        <source src="${response.file_url}">
                        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ.
                    </audio>
                    <p class="media-info">
                        üìÅ ${response.file_path}<br>
                        üìä –†–∞–∑–º–µ—Ä: ${formatFileSize(response.file_size)}
                    </p>
                `;
            } else if (mediaType === 'sticker') {
                mediaBody.innerHTML = `
                    <img src="${response.file_url}" 
                         alt="–°—Ç–∏–∫–µ—Ä –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏" 
                         class="media-preview-sticker"
                         onload="this.style.opacity=1"
                         style="opacity:0; transition: opacity 0.3s ease;">
                    <p class="media-info">
                        üìÅ ${response.file_path}<br>
                        üìä –†–∞–∑–º–µ—Ä: ${formatFileSize(response.file_size)}
                    </p>
                `;
            } else {
                // –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã
                mediaBody.innerHTML = `
                    <div class="media-preview-document">
                        <div class="document-icon">üìÑ</div>
                        <div class="document-info">
                            <h4>–î–æ–∫—É–º–µ–Ω—Ç –∏–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</h4>
                            <p>üìÅ ${response.file_path}</p>
                            <p>üìä –†–∞–∑–º–µ—Ä: ${formatFileSize(response.file_size)}</p>
                            <a href="${response.file_url}" target="_blank" class="btn-download">
                                ‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
                            </a>
                        </div>
                    </div>
                `;
            }
        } else {
            mediaBody.innerHTML = `
                <div class="media-error">
                    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞: ${response.message}
                </div>
            `;
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–¥–∏–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞', 'error');
    }
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 –ë';
    const k = 1024;
    const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

async function showMediaModal(chatId, messageId, mediaType) {
    try {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'media-modal';
        modal.innerHTML = `
            <div class="media-modal-content">
                <div class="media-modal-header">
                    <h3>${mediaType === 'photo' ? 'üñºÔ∏è –§–æ—Ç–æ' : 'üé• –í–∏–¥–µ–æ'}</h3>
                    <button class="media-modal-close" onclick="closeMediaModal()">&times;</button>
                </div>
                <div class="media-modal-body">
                    <div class="media-loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞...</div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeMediaModal();
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        const handleEscape = (e) => {
            if (e.key === 'Escape') {
                closeMediaModal();
                document.removeEventListener('keydown', handleEscape);
            }
        };
        document.addEventListener('keydown', handleEscape);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–¥–∏–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
        setTimeout(() => {
            const mediaBody = modal.querySelector('.media-modal-body');
            if (mediaType === 'photo') {
                mediaBody.innerHTML = `
                    <img src="https://via.placeholder.com/600x400/334155/e2e8f0?text=–§–æ—Ç–æ+${messageId}" 
                         alt="Media preview" class="media-preview-image">
                    <p class="media-info">Chat: ${chatId} | Message: ${messageId}</p>
                `;
            } else {
                mediaBody.innerHTML = `
                    <video controls class="media-preview-video">
                        <source src="https://sample-videos.com/zip/10/mp4/SampleVideo_360x240_1mb.mp4" type="video/mp4">
                        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
                    </video>
                    <p class="media-info">Chat: ${chatId} | Message: ${messageId}</p>
                `;
            }
        }, 500);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–¥–∏–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞', 'error');
    }
}

function closeMediaModal() {
    const modal = document.querySelector('.media-modal');
    if (modal) {
        modal.remove();
    }
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if (window.currentMediaGroup) {
        delete window.currentMediaGroup;
    }
}
