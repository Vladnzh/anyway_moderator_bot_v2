#!/usr/bin/env python3
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω–∫–∏
"""

import logging
import sys
from datetime import datetime
from typing import Dict, Any

class ColoredFormatter(logging.Formatter):
    """–¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤"""
    
    # ANSI —Ü–≤–µ—Ç–∞
    COLORS = {
        'DEBUG': '\033[36m',    # Cyan
        'INFO': '\033[32m',     # Green
        'WARNING': '\033[33m',  # Yellow
        'ERROR': '\033[31m',    # Red
        'CRITICAL': '\033[35m', # Magenta
        'RESET': '\033[0m'      # Reset
    }
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    EMOJIS = {
        'DEBUG': 'üîç',
        'INFO': '‚úÖ',
        'WARNING': '‚ö†Ô∏è',
        'ERROR': '‚ùå',
        'CRITICAL': 'üí•'
    }
    
    def format(self, record):
        # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è
        color = self.COLORS.get(record.levelname, '')
        reset = self.COLORS['RESET']
        emoji = self.EMOJIS.get(record.levelname, 'üìù')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        timestamp = datetime.fromtimestamp(record.created).strftime('%H:%M:%S')
        
        # –°–æ–∫—Ä–∞—â–∞–µ–º –∏–º—è –ª–æ–≥–≥–µ—Ä–∞
        logger_name = record.name
        if logger_name.startswith('telegram.'):
            logger_name = 'TG'
        elif logger_name.startswith('httpx'):
            logger_name = 'HTTP'
        elif logger_name.startswith('apscheduler'):
            logger_name = 'SCHED'
        elif logger_name.startswith('uvicorn'):
            logger_name = 'WEB'
        elif logger_name == '__main__':
            logger_name = 'BOT'
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = record.getMessage()
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'process_reaction_queue' in message and record.levelname == 'INFO':
            return f"{color}{emoji} {timestamp} [{logger_name}]{reset} üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Ä–µ–∞–∫—Ü–∏–π"
        elif 'getUpdates' in message and record.levelname == 'INFO':
            return f"{color}{emoji} {timestamp} [{logger_name}]{reset} üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram"
        elif 'HTTP/1.1 200 OK' in message:
            return f"{color}{emoji} {timestamp} [{logger_name}]{reset} üåê API –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω"
        elif record.levelname in ['ERROR', 'CRITICAL']:
            return f"{color}{emoji} {timestamp} [{logger_name}]{reset} {message}"
        elif record.levelname == 'WARNING':
            return f"{color}{emoji} {timestamp} [{logger_name}]{reset} {message}"
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö INFO —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ
            if any(keyword in message.lower() for keyword in ['–æ—à–∏–±–∫–∞', 'error', '—Ä–µ–∞–∫—Ü–∏—è', '–º–æ–¥–µ—Ä–∞—Ü–∏—è', '—Ç–µ–≥']):
                return f"{color}{emoji} {timestamp} [{logger_name}]{reset} {message}"
            else:
                # –°–∫—Ä—ã–≤–∞–µ–º —Ä—É—Ç–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                return None

def setup_logging(app_name: str = "BOT", level: str = "INFO"):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger()
    logger.setLevel(getattr(logging, level.upper()))
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.handlers.clear()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(getattr(logging, level.upper()))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = ColoredFormatter()
    console_handler.setFormatter(formatter)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è None —Å–æ–æ–±—â–µ–Ω–∏–π
    def filter_none(record):
        formatted = formatter.format(record)
        return formatted is not None
    
    console_handler.addFilter(filter_none)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É
    logger.addHandler(console_handler)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('apscheduler.executors.default').setLevel(logging.WARNING)
    logging.getLogger('apscheduler.scheduler').setLevel(logging.WARNING)
    logging.getLogger('uvicorn.access').setLevel(logging.WARNING)
    logging.getLogger('telegram.ext').setLevel(logging.WARNING)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print(f"""
ü§ñ {app_name} –∑–∞–ø—É—â–µ–Ω
‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {level.upper()}
üé® –¶–≤–µ—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ
""")

def log_bot_event(event_type: str, details: Dict[str, Any]):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞"""
    logger = logging.getLogger('BOT')
    
    if event_type == 'reaction_set':
        logger.info(f"üéØ –†–µ–∞–∫—Ü–∏—è {details['emoji']} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {details['user']} | –¢–µ–≥: {details['tag']}")
    elif event_type == 'moderation_added':
        logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {details['user']} | –¢–µ–≥: {details['tag']}")
    elif event_type == 'moderation_approved':
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ | ID: {details['id']} | –¢–µ–≥: {details['tag']}")
    elif event_type == 'moderation_rejected':
        logger.info(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ | ID: {details['id']} | –¢–µ–≥: {details['tag']}")
    elif event_type == 'duplicate_media':
        logger.warning(f"üîÑ –î—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è –º–µ–¥–∏–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {details['user']}")
    elif event_type == 'error':
        logger.error(f"üí• –û—à–∏–±–∫–∞: {details['message']}")
