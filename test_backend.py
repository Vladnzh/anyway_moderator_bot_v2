e vty#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –±–æ—Ç–∞
"""
import json
import hmac
import hashlib
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import uvicorn

app = FastAPI(title="Test Backend Server")

# –°–µ–∫—Ä–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (—Ç–æ—Ç –∂–µ, —á—Ç–æ –≤ .env)
BOT_SHARED_SECRET = "9cc435be827c05862919e4a7534fb1d659570aa7bc873c6f138cb60204de7457"

def verify_signature(data: str, signature: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å HMAC –ø–æ–¥–ø–∏—Å—å"""
    expected = hmac.new(
        BOT_SHARED_SECRET.encode('utf-8'),
        data.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()
    return hmac.compare_digest(expected, signature)

@app.post("/api/telegram/reaction")
async def receive_reaction(request: Request):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∞–∫—Ü–∏–∏ –æ—Ç –±–æ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.body()
        data = body.decode('utf-8')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        signature = request.headers.get('X-Signature', '')
        
        print(f"\nüî• –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –û –†–ï–ê–ö–¶–ò–ò:")
        print(f"üìù –î–∞–Ω–Ω—ã–µ: {data}")
        print(f"üîê –ü–æ–¥–ø–∏—Å—å: {signature[:16]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        if not verify_signature(data, signature):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å!")
            raise HTTPException(status_code=401, detail="Invalid signature")
        
        print("‚úÖ –ü–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞!")
        
        # –ü–∞—Ä—Å–∏–º JSON
        reaction_data = json.loads(data)
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {reaction_data.get('username', 'N/A')} (ID: {reaction_data.get('tg_user_id', 'N/A')})")
        print(f"üè∑Ô∏è –¢–µ–≥: {reaction_data.get('tag', 'N/A')}")
        print(f"üìä –°—á–µ—Ç—á–∏–∫: {reaction_data.get('counter_name', 'N/A')}")
        print(f"üòÄ –≠–º–æ–¥–∑–∏: {reaction_data.get('emoji', 'N/A')}")
        print(f"üí¨ –ß–∞—Ç: {reaction_data.get('chat_id', 'N/A')}")
        print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ: {reaction_data.get('message_id', 'N/A')}")
        print(f"üìÑ –¢–µ–∫—Å—Ç: {reaction_data.get('text', 'N/A')}")
        print(f"üé≠ –°—Ç–∞—Ç—É—Å: {reaction_data.get('status', 'N/A')}")
        print(f"üì∑ –§–æ—Ç–æ: {reaction_data.get('has_photo', False)}")
        print(f"üé• –í–∏–¥–µ–æ: {reaction_data.get('has_video', False)}")
        print(f"‚è∞ –í—Ä–µ–º—è: {reaction_data.get('timestamp', 'N/A')}")
        
        return JSONResponse({
            "status": "success",
            "message": "–î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã",
            "received_data": reaction_data
        })
        
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
        raise HTTPException(status_code=400, detail="Invalid JSON")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/")
async def root():
    return {"message": "Test Backend Server –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –±–æ—Ç–∞"}

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±—ç–∫–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://localhost:3002")
    print("üì° Endpoint: POST /api/telegram/reaction")
    print("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ HMAC –ø–æ–¥–ø–∏—Å–∏ –≤–∫–ª—é—á–µ–Ω–∞")
    print("=" * 50)
    
    uvicorn.run(app, host="0.0.0.0", port=3002, log_level="info")
