import os, json, datetime, asyncio, uuid, logging, hmac, hashlib
from typing import Literal, List, Dict, Any, Optional
from pathlib import Path
import httpx
import aiohttp
from database import db
from logger_config import setup_logging, log_bot_event
from fastapi import FastAPI, Request, Form, HTTPException, Depends, Query
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_TOKEN = os.getenv("ADMIN_TOKEN")
BOT_TOKEN = os.getenv("BOT_TOKEN")
BOT_SHARED_SECRET = os.getenv("BOT_SHARED_SECRET")
ADMIN_URL = os.getenv("ADMIN_URL", "http://localhost:8000")

if not ADMIN_TOKEN:
    print("‚ö†Ô∏è ADMIN_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'changeme'")
    ADMIN_TOKEN = "changeme"
else:
    print(f"üîë ADMIN_TOKEN –Ω–∞–π–¥–µ–Ω: {ADMIN_TOKEN[:6]}...{ADMIN_TOKEN[-4:]}")

if not BOT_TOKEN:
    print("‚ö†Ô∏è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging("ADMIN PANEL", "INFO")
logger = logging.getLogger('ADMIN')

# ---- –º–æ–¥–µ–ª–∏ ----
class TagConfig(BaseModel):
    id: str = ""  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç–µ–≥–∞
    tag: str
    emoji: str
    delay: int = 0
    match_mode: Literal["equals", "prefix"] = "equals"
    require_photo: bool = True  # –¢—Ä–µ–±–æ–≤–∞—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)
    reply_ok: str = "–ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ! ü¶ã"
    reply_need_photo: str = "–©–æ–± –∑–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ ‚Äî –¥–æ–¥–∞–π —Ñ–æ—Ç–æ —ñ –ø–æ–≤—Ç–æ—Ä–∏ –∑ —Ö–µ—à—Ç–µ–≥–æ–º."
    thread_name: str = ""  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞ (–ø—É—Å—Ç–æ–µ = –ª—é–±–æ–π —Ç—Ä–µ–¥)
    reply_duplicate: str = ""  # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ (–ø—É—Å—Ç–æ–µ = –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è)
    moderation_enabled: bool = False  # –¢—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    reply_pending: str = ""  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    counter_name: str = ""  # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏

class ModerationItem(BaseModel):
    id: str  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø–∏—Å–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    chat_id: int
    message_id: int
    user_id: int
    username: str
    tag: str
    emoji: str
    text: str
    caption: str
    media_info: Optional[Dict[str, Any]] = None
    thread_name: str
    counter_name: str = ""  # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ç–µ–≥–∞
    created_at: str
    status: Literal["pending", "approved", "rejected"] = "pending"

class Config(BaseModel):
    tags: List[TagConfig] = []

class TagUpdate(BaseModel):
    tag: str
    emoji: str
    delay: int = 0
    match_mode: Literal["equals", "prefix"] = "equals"
    require_photo: bool = True
    reply_ok: str = ""
    reply_need_photo: str = ""
    thread_name: str = ""
    reply_duplicate: str = ""
    moderation_enabled: bool = False
    reply_pending: str = ""
    counter_name: str = ""

class ApiResponse(BaseModel):
    success: bool
    message: str = ""
    data: Any = None

# ---- FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ----
app = FastAPI(title="Moderator Bot Admin API", version="2.0")

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
def require_admin(token: str = Form(...)):
    if token != ADMIN_TOKEN:
        raise HTTPException(status_code=401, detail="Unauthorized")
    return True

def require_api_admin(request: Request):
    authorization = request.headers.get("authorization", "")
    if not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Unauthorized")
    
    token = authorization[7:]  # –£–±–∏—Ä–∞–µ–º "Bearer "
    if token != ADMIN_TOKEN:
        raise HTTPException(status_code=401, detail="Unauthorized")
    return True

# ---- API Endpoints ----

@app.get("/api/tags")
def get_tags(request: Request, _: bool = Depends(require_api_admin)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ–≥–∏"""
    try:
        tags = db.get_tags()
        return ApiResponse(success=True, data=tags)
    except Exception as e:
        return ApiResponse(success=False, message=str(e))

@app.post("/api/tags")
def create_tag(tag: TagUpdate, _: bool = Depends(require_api_admin)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        existing_tags = db.get_tags()
        if any(t['tag'].lower() == tag.tag.strip().lower() for t in existing_tags):
            return ApiResponse(success=False, message="–¢–µ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        tag_data = {
            'tag': tag.tag.strip().lower(),
            'emoji': tag.emoji.strip(),
            'delay': max(0, min(60, tag.delay)),
            'match_mode': tag.match_mode,
            'require_photo': tag.require_photo,
            'reply_ok': tag.reply_ok.strip(),
            'reply_need_photo': tag.reply_need_photo.strip(),
            'thread_name': tag.thread_name.strip(),
            'reply_duplicate': tag.reply_duplicate.strip(),
            'moderation_enabled': tag.moderation_enabled,
            'reply_pending': tag.reply_pending.strip(),
            'counter_name': tag.counter_name.strip()
        }
        
        tag_id = db.create_tag(tag_data)
        created_tag = db.get_tag_by_id(tag_id)
        return ApiResponse(success=True, message="–¢–µ–≥ —Å–æ–∑–¥–∞–Ω", data=created_tag)
    except Exception as e:
        return ApiResponse(success=False, message=str(e))

@app.put("/api/tags/{tag_id}")
def update_tag(tag_id: str, tag: TagUpdate, _: bool = Depends(require_api_admin)):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–≥ –ø–æ ID"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
        existing_tag = db.get_tag_by_id(tag_id)
        if not existing_tag:
            return ApiResponse(success=False, message=f"–¢–µ–≥ —Å ID {tag_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        tag_data = {
            'tag': tag.tag.strip().lower(),
            'emoji': tag.emoji.strip(),
            'delay': max(0, min(60, tag.delay)),
            'match_mode': tag.match_mode,
            'require_photo': tag.require_photo,
            'reply_ok': tag.reply_ok.strip(),
            'reply_need_photo': tag.reply_need_photo.strip(),
            'thread_name': tag.thread_name.strip(),
            'reply_duplicate': tag.reply_duplicate.strip(),
            'moderation_enabled': tag.moderation_enabled,
            'reply_pending': tag.reply_pending.strip(),
            'counter_name': tag.counter_name.strip()
        }
        
        success = db.update_tag(tag_id, tag_data)
        if success:
            updated_tag = db.get_tag_by_id(tag_id)
            return ApiResponse(success=True, message="–¢–µ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω", data=updated_tag)
        else:
            return ApiResponse(success=False, message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–≥")
    except Exception as e:
        return ApiResponse(success=False, message=str(e))

@app.delete("/api/tags/{tag_id}")
def delete_tag(tag_id: str, _: bool = Depends(require_api_admin)):
    """–£–¥–∞–ª–∏—Ç—å —Ç–µ–≥ –ø–æ ID"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        existing_tag = db.get_tag_by_id(tag_id)
        if not existing_tag:
            return ApiResponse(success=False, message=f"–¢–µ–≥ —Å ID {tag_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        success = db.delete_tag(tag_id)
        if success:
            return ApiResponse(success=True, message=f"–¢–µ–≥ {existing_tag['tag']} —É–¥–∞–ª–µ–Ω")
        else:
            return ApiResponse(success=False, message="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥")
    except Exception as e:
        return ApiResponse(success=False, message=str(e))

@app.get("/api/logs")
def get_logs(
    tag: Optional[str] = Query(default=None),
    limit: int = Query(default=200, ge=1, le=2000),
    _: bool = Depends(require_api_admin)
):
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    try:
        logs = db.get_logs(tag=tag, limit=limit)
        return ApiResponse(success=True, data=logs)
    except Exception as e:
        return ApiResponse(success=False, message=str(e))

@app.delete("/api/logs")
def clear_logs(_: bool = Depends(require_api_admin)):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏"""
    try:
        with db.get_connection() as conn:
            # –û—á–∏—â–∞–µ–º –ª–æ–≥–∏
            cursor = conn.execute("DELETE FROM logs")
            deleted_logs = cursor.rowcount
            
            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Ä–µ–∞–∫—Ü–∏–π
            cursor = conn.execute("DELETE FROM reaction_queue")
            deleted_reactions = cursor.rowcount
            
            # –û—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º pending)
            cursor = conn.execute("DELETE FROM moderation_queue WHERE status != 'pending'")
            deleted_moderation = cursor.rowcount
            
            conn.commit()
        
        return ApiResponse(
            success=True, 
            message=f"–û—á–∏—â–µ–Ω–æ: {deleted_logs} –ª–æ–≥–æ–≤, {deleted_reactions} —Ä–µ–∞–∫—Ü–∏–π, {deleted_moderation} –º–æ–¥–µ—Ä–∞—Ü–∏–π",
            data={
                "deleted_logs": deleted_logs,
                "deleted_reactions": deleted_reactions,
                "deleted_moderation": deleted_moderation
            }
        )
    except Exception as e:
        return ApiResponse(success=False, message=str(e))

@app.get("/api/stats")
def get_stats(_: bool = Depends(require_api_admin)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        stats = db.get_stats()
        return ApiResponse(success=True, data=stats)
    except Exception as e:
        return ApiResponse(success=False, message=str(e))

# ---- –ú–æ–¥–µ—Ä–∞—Ü–∏—è ----

@app.get("/api/moderation")
def get_moderation(_: bool = Depends(require_api_admin)):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    try:
        items = db.get_pending_moderation()
        return ApiResponse(success=True, data=items)
    except Exception as e:
        return ApiResponse(success=False, message=str(e))

def create_hmac_signature(data: str, secret: str) -> str:
    """–°–æ–∑–¥–∞—Ç—å HMAC-SHA256 –ø–æ–¥–ø–∏—Å—å"""
    return hmac.new(
        secret.encode('utf-8'),
        data.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()

async def set_telegram_reaction(chat_id: int, message_id: int, emoji: str) -> bool:
    """–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ Telegram API"""
    try:
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            print("‚ùå BOT_TOKEN not found")
            return False
            
        url = f"https://api.telegram.org/bot{bot_token}/setMessageReaction"
        data = {
            "chat_id": chat_id,
            "message_id": message_id,
            "reaction": json.dumps([{"type": "emoji", "emoji": emoji}])
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(url, data=data)
            result = response.json()
            
            if result.get("ok"):
                print(f"‚úÖ Reaction {emoji} set directly via API for message {message_id}")
                return True
            else:
                print(f"‚ùå Failed to set reaction: {result.get('description', 'Unknown error')}")
                return False
                
    except Exception as e:
        print(f"‚ùå Exception setting reaction: {e}")
        return False

@app.post("/api/moderation/{item_id}/approve")
async def approve_moderation(item_id: str, _: bool = Depends(require_api_admin)):
    """–û–¥–æ–±—Ä–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        items = db.get_pending_moderation()
        item = next((i for i in items if i['id'] == item_id), None)
        
        if not item:
            return ApiResponse(success=False, message="–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        success = db.update_moderation_status(item_id, "approved")
        if not success:
            return ApiResponse(success=False, message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
        reaction_success = await set_telegram_reaction(
            item['chat_id'], 
            item['message_id'], 
            item['emoji']
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∏ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏
        log_data = {
            'user_id': item['user_id'],
            'username': item['username'],
            'chat_id': item['chat_id'],
            'message_id': item['message_id'],
            'trigger': item.get('tag', item.get('trigger', '')),  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            'emoji': item['emoji'],
            'thread_name': item.get('thread_name', ''),
            'media_type': item.get('media_info', {}).get('media_type', '') if item.get('media_info') else '',
            'caption': item.get('caption', '')
        }
        db.add_log(log_data)
        
        if reaction_success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±—ç–∫–µ–Ω–¥ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏
            try:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                media_info = item.get('media_info', {})
                payload = {
                    "tg_user_id": str(item['user_id']),
                    "username": item.get('username', ''),
                    "first_name": item.get('first_name', ''),
                    "last_name": item.get('last_name', ''),
                    "tag": item.get('tag', ''),
                    "counter_name": item.get('counter_name', ''),
                    "emoji": item.get('emoji', ''),
                    "chat_id": str(item['chat_id']),
                    "message_id": str(item['message_id']),
                    "text": item.get('text', ''),
                    "caption": item.get('caption', ''),
                    "thread_name": item.get('thread_name', ''),
                    "has_photo": media_info.get('has_photo', False),
                    "has_video": media_info.get('has_video', False),
                    "media_file_ids": media_info.get('media_file_ids', []),
                    "status": "approved",
                    "timestamp": datetime.datetime.now().isoformat()
                }
                
                if BOT_SHARED_SECRET:
                    # –°–æ–∑–¥–∞–µ–º JSON —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–¥–ø–∏—Å—å
                    json_data = json.dumps(payload, separators=(',', ':'), ensure_ascii=False)
                    signature = create_hmac_signature(json_data, BOT_SHARED_SECRET)
                    
                    logger.debug(f"üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ {ADMIN_URL}/api/telegram/reaction")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                    async with aiohttp.ClientSession() as session:
                        async with session.post(
                            f"{ADMIN_URL}/api/telegram/reaction",
                            data=json_data,
                            headers={
                                "Content-Type": "application/json",
                                "X-Signature": signature
                            },
                            timeout=aiohttp.ClientTimeout(total=10)
                        ) as response:
                            if response.status == 200:
                                response_data = await response.json()
                                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∞–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: user_id={item['user_id']}")
                            else:
                                logger.warning(f"‚ö†Ô∏è –ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status}")
                else:
                    logger.warning("‚ö†Ô∏è BOT_SHARED_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∞–∫—Ü–∏–∏: {e}")
            
            return ApiResponse(success=True, message="–≠–ª–µ–º–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω, —Ä–µ–∞–∫—Ü–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Ä–µ–∞–∫—Ü–∏–π –∫–∞–∫ —Ñ–æ–ª–ª–±—ç–∫
            db.add_reaction_queue(item_id, item['chat_id'], item['message_id'], item['emoji'])
            return ApiResponse(success=True, message="–≠–ª–µ–º–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω, —Ä–µ–∞–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
            
    except Exception as e:
        return ApiResponse(success=False, message=str(e))

@app.post("/api/moderation/{item_id}/reject")
async def reject_moderation(item_id: str, _: bool = Depends(require_api_admin)):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        items = db.get_pending_moderation()
        item = next((i for i in items if i['id'] == item_id), None)
        
        if not item:
            return ApiResponse(success=False, message="–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        success = db.update_moderation_status(item_id, "rejected")
        if success:
            # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ - —Ä–µ–∞–∫—Ü–∏—è –Ω–µ —Å—Ç–∞–≤–∏—Ç—Å—è
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∏ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ (—Å —ç–º–æ–¥–∑–∏ ‚ùå)
            log_data = {
                'user_id': item['user_id'],
                'username': item['username'],
                'chat_id': item['chat_id'],
                'message_id': item['message_id'],
                'trigger': item.get('tag', item.get('trigger', '')),  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                'emoji': '‚ùå',  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö
                'thread_name': item.get('thread_name', ''),
                'media_type': item.get('media_info', {}).get('media_type', '') if item.get('media_info') else '',
                'caption': item.get('caption', '')
            }
            db.add_log(log_data)
            
            return ApiResponse(success=True, message="–≠–ª–µ–º–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        else:
            return ApiResponse(success=False, message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
    except Exception as e:
        return ApiResponse(success=False, message=str(e))

# ---- Media API ----
@app.get("/api/media/file/{file_id}")
async def get_media_file(file_id: str, _: bool = Depends(require_api_admin)):
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª –ø–æ file_id —á–µ—Ä–µ–∑ Telegram Bot API"""
    try:
        if not BOT_TOKEN:
            return {"success": False, "message": "BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
            
        async with httpx.AsyncClient() as client:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_response = await client.get(
                f"https://api.telegram.org/bot{BOT_TOKEN}/getFile",
                params={"file_id": file_id}
            )
            
            if file_response.status_code != 200:
                return {"success": False, "message": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                
            file_data = file_response.json()
            if not file_data.get("ok"):
                return {"success": False, "message": file_data.get("description", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞")}
                
            file_path = file_data["result"]["file_path"]
            file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            media_type = "photo"
            if file_path.lower().endswith(('.mp4', '.mov', '.avi', '.mkv')):
                media_type = "video"
            elif file_path.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.webp')):
                media_type = "photo"
                
            return {
                "success": True,
                "file_url": file_url,
                "file_path": file_path,
                "media_type": media_type,
                "file_size": file_data["result"].get("file_size", 0)
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ {file_id}: {e}")
        return {"success": False, "message": str(e)}

# ---- Direct Reaction API ----
class ReactionRequest(BaseModel):
    chat_id: int
    message_id: int
    emoji: str

@app.post("/api/reactions/set")
async def set_reaction_direct(request: ReactionRequest, _: bool = Depends(require_api_admin)):
    """–ü—Ä—è–º–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é"""
    try:
        success = await set_telegram_reaction(
            chat_id=request.chat_id,
            message_id=request.message_id,
            emoji=request.emoji
        )
        
        if success:
            return ApiResponse(success=True, message=f"–†–µ–∞–∫—Ü–∏—è {request.emoji} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {request.message_id}")
        else:
            return ApiResponse(success=False, message="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é")
    except Exception as e:
        return ApiResponse(success=False, message=str(e))

@app.delete("/api/reactions/remove")
async def remove_reaction_direct(request: ReactionRequest, _: bool = Depends(require_api_admin)):
    """–ü—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            return ApiResponse(success=False, message="BOT_TOKEN not found")
            
        url = f"https://api.telegram.org/bot{bot_token}/setMessageReaction"
        data = {
            "chat_id": request.chat_id,
            "message_id": request.message_id,
            "reaction": json.dumps([])  # –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ä–µ–∞–∫—Ü–∏–∏
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(url, data=data)
            result = response.json()
            
            if result.get("ok"):
                print(f"‚úÖ Reactions removed from message {request.message_id}")
                return ApiResponse(success=True, message=f"–†–µ–∞–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è {request.message_id}")
            else:
                return ApiResponse(success=False, message=f"–û—à–∏–±–∫–∞: {result.get('description', 'Unknown error')}")
                
    except Exception as e:
        return ApiResponse(success=False, message=str(e))

@app.get("/api/reactions/queue")
def get_reaction_queue(_: bool = Depends(require_api_admin)):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å —Ä–µ–∞–∫—Ü–∏–π"""
    try:
        queue = db.get_reaction_queue()
        return ApiResponse(success=True, data=queue)
    except Exception as e:
        return ApiResponse(success=False, message=str(e))

@app.delete("/api/reactions/queue")
def clear_reaction_queue(_: bool = Depends(require_api_admin)):
    """–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —Ä–µ–∞–∫—Ü–∏–π"""
    try:
        db.clear_reaction_queue()
        return ApiResponse(success=True, message="–û—á–µ—Ä–µ–¥—å —Ä–µ–∞–∫—Ü–∏–π –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        return ApiResponse(success=False, message=str(e))

# –†–µ–¥–∏—Ä–µ–∫—Ç —Å –∫–æ—Ä–Ω—è –Ω–∞ –Ω–æ–≤—É—é –∞–¥–º–∏–Ω–∫—É  
@app.get("/")
def root_redirect():
    return RedirectResponse(url="/static/admin.html")

@app.get("/admin")
def admin_redirect():
    return RedirectResponse(url="/static/admin.html")

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ)
app.mount("/static", StaticFiles(directory="static"), name="static")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
