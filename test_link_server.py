#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import hmac
import hashlib
import json
import uuid
from datetime import datetime, timedelta
from fastapi import FastAPI, HTTPException, Header
from pydantic import BaseModel
import uvicorn

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_SHARED_SECRET = "test_secret_key_123456789"  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—Ç –∂–µ —Å–µ–∫—Ä–µ—Ç —á—Ç–æ –∏ –≤ –±–æ—Ç–µ
TEST_CODES = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–¥–æ–≤

app = FastAPI(title="Test Account Linking Server")

class LinkRequest(BaseModel):
    code: str
    tg_user_id: str
    username: str = ""
    first_name: str = ""
    last_name: str = ""

def verify_signature(body: str, signature: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å HMAC –ø–æ–¥–ø–∏—Å—å"""
    expected = hmac.new(
        BOT_SHARED_SECRET.encode('utf-8'),
        body.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()
    return hmac.compare_digest(signature, expected)

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    return {
        "message": "Test Account Linking Server",
        "endpoints": {
            "POST /api/telegram/link": "–ü—Ä–∏–≤—è–∑–∫–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞",
            "POST /generate-code": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∞",
            "GET /codes": "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤"
        }
    }

@app.post("/generate-code")
async def generate_test_code(user_id: str = "test_user_123"):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–∏–≤—è–∑–∫–∏"""
    code = str(uuid.uuid4())[:8].upper()
    expires_at = datetime.now() + timedelta(minutes=5)
    
    TEST_CODES[code] = {
        "user_id": user_id,
        "expires_at": expires_at,
        "used": False
    }
    
    return {
        "code": code,
        "user_id": user_id,
        "expires_at": expires_at.isoformat(),
        "message": f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É: /start {code}"
    }

@app.get("/codes")
async def list_codes():
    """–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤"""
    now = datetime.now()
    active_codes = {}
    
    for code, data in TEST_CODES.items():
        if not data["used"] and data["expires_at"] > now:
            active_codes[code] = {
                "user_id": data["user_id"],
                "expires_at": data["expires_at"].isoformat(),
                "expires_in_seconds": int((data["expires_at"] - now).total_seconds())
            }
    
    return {
        "active_codes": active_codes,
        "total": len(active_codes)
    }

@app.post("/api/telegram/link")
async def link_telegram(
    data: LinkRequest,
    x_signature: str = Header(alias="X-Signature")
):
    """–ü—Ä–∏–≤—è–∑–∫–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    body = json.dumps(data.dict(), separators=(',', ':'), ensure_ascii=False)
    if not verify_signature(body, x_signature):
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: {x_signature}")
        print(f"üìù –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {body}")
        raise HTTPException(status_code=401, detail="Invalid signature")
    
    print(f"‚úÖ –ü–æ–¥–ø–∏—Å—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    print(f"üìù –î–∞–Ω–Ω—ã–µ: {data.dict()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    if data.code not in TEST_CODES:
        print(f"‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {data.code}")
        raise HTTPException(
            status_code=400,
            detail={"error": "invalid_or_expired_code"}
        )
    
    code_data = TEST_CODES[data.code]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if datetime.now() > code_data["expires_at"]:
        print(f"‚ùå –ö–æ–¥ –∏—Å—Ç–µ–∫: {data.code}")
        raise HTTPException(
            status_code=400,
            detail={"error": "invalid_or_expired_code"}
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ –∫–æ–¥
    if code_data["used"]:
        print(f"‚ùå –ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {data.code}")
        raise HTTPException(
            status_code=400,
            detail={"error": "invalid_or_expired_code"}
        )
    
    # –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    code_data["used"] = True
    code_data["linked_tg_user"] = {
        "tg_user_id": data.tg_user_id,
        "username": data.username,
        "first_name": data.first_name,
        "last_name": data.last_name,
        "linked_at": datetime.now().isoformat()
    }
    
    print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω: {data.tg_user_id} -> {code_data['user_id']}")
    
    return {"status": "linked"}

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    print(f"üîê –°–µ–∫—Ä–µ—Ç: {BOT_SHARED_SECRET}")
    print()
    print("üìã –ö–∞–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000/generate-code –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥")
    print("4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É: /start <–ö–û–î>")
    print()
    
    uvicorn.run(app, host="0.0.0.0", port=3000)
